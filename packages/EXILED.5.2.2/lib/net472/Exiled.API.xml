<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.API</name>
    </assembly>
    <members>
        <member name="T:Exiled.API.Enums.AdminToyType">
            <summary>
            Unique identifier for the different types of admin toys.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AdminToyType.PrimitiveObject">
            <summary>
            Primitive Object toy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AdminToyType.LightSource">
            <summary>
            Light source toy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AdminToyType.ShootingTarget">
            <summary>
            Primitive Object toy.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.AmmoType">
            <summary>
            Ammo types present in the game.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.None">
            <summary>
            Not ammo.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato556">
            <summary>
            5.56mm Ammunition.
            Used by <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato762">
            <summary>
            7.62mm Ammunition.
            Used by and <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato9">
            <summary>
            9mm Ammunition.
            Used by <see cref="F:ItemType.GunCOM15"/>,.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Ammo12Gauge">
            <summary>
            12 gauge shotgun ammo.
            Used by <see cref="F:ItemType.GunShotgun"/>
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Ammo44Cal">
            <summary>
            44 caliber.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.AuthenticationType">
            <summary>
            Players authentication types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Steam">
            <summary>
            Indicates that the player has been authenticated through Steam.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Discord">
            <summary>
            Indicates that the player has been authenticated through Discord.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Northwood">
            <summary>
            Indicates that the player has been authenticated as a Northwood staffer.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Patreon">
            <summary>
            Indicates that the player has been authenticated as a Patreon.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Unknown">
            <summary>
            Indicates that the player has been authenticated through an unknown provider.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.BaseCode">
            <summary>
            Firearms base codes.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunCOM15">
            <summary>
            The COM15's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunCOM18">
            <summary>
            The COM18's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunRevolver">
            <summary>
            The Revolver's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunE11SR">
            <summary>
            The E11SR's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunCrossvec">
            <summary>
            The Crossvec's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunFSP9">
            <summary>
            The FSP9's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunLogicer">
            <summary>
            The Logicer's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunAK">
            <summary>
            The AK's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.GunShotgun">
            <summary>
            The Shotgun's base code.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BaseCode.Disruptor">
            <summary>
            The Disruptor's base code.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.BloodType">
            <summary>
            Unique identifier for the different types of blood decals.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Default">
            <summary>
            The default blood decal.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Scp106">
            <summary>
            The blood decal placed after Scp106 sends someone to the pocket dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Spreaded">
            <summary>
            The spreaded blood decal.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Faded">
            <summary>
            The faded blood decal.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.CameraType">
            <summary>
            Unique identifier for the different types of SCP-079 cameras.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Unknown">
            <summary>
            Represents an unknown camera.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczAEntrance">
            <summary>
            Represents the camera facing the LCZ/HCZ A checkpoint, on the Light Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczBEntrance">
            <summary>
            Represents the camera facing the LCZ/HCZ B checkpoint, on the Light Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Armory">
            <summary>
            Represents the camera outside the <c>173_ARMORY</c> door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Bottom">
            <summary>
            Represents the camera above the <c>173_BOTTOM</c> door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Chamber">
            <summary>
            Represents the camera inside of SCP-173's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Hallway">
            <summary>
            Represents the camera outside of SCP-173's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz330Chamber">
            <summary>
            Represents the camera inside SCP-330's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz330Hall">
            <summary>
            Represents the camera inside the hall leading to SCP-330's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz914">
            <summary>
            Represents the camera inside SCP-914's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz914Hallway">
            <summary>
            Represents the camera outside SCP-914.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczAirlock">
            <summary>
            Represents a camera inside of an LCZ airlock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczALifts">
            <summary>
            Represents the camera in the LCZ A <see cref="T:Lift"/> in LCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczArmory">
            <summary>
            Represents the camera inside the LCZ armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczBLifts">
            <summary>
            Represents the camera in the LCZ B <see cref="T:Lift"/> in LCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczCafe">
            <summary>
            Represents the LCZ cafe/office, also known as PC-15.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczClassDSpawn">
            <summary>
            Represents the camera inside the Class-D spawns.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczCorner">
            <summary>
            Represents a camera in a LCZ corner.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczGlassRoom">
            <summary>
            Represents the camera inside SCP-372's containment room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczGreenhouse">
            <summary>
            Represents the greenhouse room in LCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczHall">
            <summary>
            Represents a camera in a LCZ hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczTIntersection">
            <summary>
            Represents a camera in a LCZ T-Intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczWC">
            <summary>
            Represents the camera inside the WC hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczXIntersection">
            <summary>
            Represents a camera in a LCZ X-Intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz049Elevator">
            <summary>
            Represents the camera in the SCP-049 <see cref="T:Lift"/> hallway that is in front of the elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz049Hall">
            <summary>
            Represents one of the four cameras found in the hallway leading to SCP-049's containment chamber, and the SCP-049 armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz049Armory">
            <summary>
            Represents the camera that faces toward the <c>049_ARMORY</c> <see cref="T:Exiled.API.Features.Door"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079Control">
            <summary>
            Represents the camera inside SCP-079's control room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079Hallway">
            <summary>
            Represents the camera in the hallway between the 079_FIRST and 079_SECOND doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079Main">
            <summary>
            Represents the camera inside SCP-079's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079PreHallway">
            <summary>
            Represents the camera in the pre-hallway in front of 079_FIRST door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz096">
            <summary>
            Represents the camera outside of SCP-096's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106First">
            <summary>
            Represents the SCP-106 MAIN CAM camera (above the door leading to SCP-106's room).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Primary">
            <summary>
            Represents the 106 ENT A camera (above the 106_PRIMARY door inside the containment room).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Recontainer">
            <summary>
            Represents the camera above the femur breaker.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Second">
            <summary>
            Represents the SCP-106 SECOND camera (outside the 106_PRIMARY door).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Secondary">
            <summary>
            Represents the 106 ENT B camera (above the 106_SECONDARY door inside the containment room).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Stairs">
            <summary>
            Represents the camera facing toward the stairs in SCP-106's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz939">
            <summary>
            Represents the camera inside SCP-939's containment room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczALifts">
            <summary>
            Represents the camera in the LCZ A <see cref="T:Lift"/> in HCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczArmory">
            <summary>
            Represents the camera above the HCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczBLifts">
            <summary>
            Represents the camera in the LCZ B <see cref="T:Lift"/> in heavy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczCorner">
            <summary>
            Represents a camera in a HCZ corner.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczHall">
            <summary>
            Represents a camera in a HCZ hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczHidHall">
            <summary>
            Represents the camera in the HID hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczHidInterior">
            <summary>
            Represents the camera inside the Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczServerBottom">
            <summary>
            Represents the camera on the bottom level of the server room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczServerHall">
            <summary>
            Represents the hallway camera in the server room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczServerTop">
            <summary>
            Represents the camera on the top level of the server room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczTeslaGate">
            <summary>
            Represents a camera placed next to an HCZ tesla gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadArmory">
            <summary>
            Represents the camera inside the alpha warhead armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadHall">
            <summary>
            Represents the camera outside of the alpha warhead <see cref="T:Lift"/> in HCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadRoom">
            <summary>
            Represents the camera inside of the alpha warhead room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadSwitch">
            <summary>
            Represents the camera above the alpha warhead switch.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzEntrance">
            <summary>
            Represents the camera facing toward the entrance zone checkpoint (in HCZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczTIntersection">
            <summary>
            Represents a camera in a HCZ T-Intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczXIntersection">
            <summary>
            Represents a camera in a HCZ X-Intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczAEntrance">
            <summary>
            Represents the camera facing the LCZ/HCZ A checkpoint, on the Heavy Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczBEntrance">
            <summary>
            Represents the camera facing the LCZ/HCZ B checkpoint, on the Heavy Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzCorner">
            <summary>
            Represents a camera in an EZ corner.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczEntrance">
            <summary>
            Represents the camera facing toward the heavy containment zone checkpoint (in EZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzGateA">
            <summary>
            Represents the camera inside of Gate A (entrance zone).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzGateB">
            <summary>
            Represents the camera inside of Gate B (entrance zone).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzHall">
            <summary>
            Represents a camera in an EZ hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzIntercomHall">
            <summary>
            Represents the camera outside the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzIntercomInterior">
            <summary>
            Represents the camera facing the intercom.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzIntercomStairs">
            <summary>
            Represents the camera inside the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzOffice">
            <summary>
            Represents a camera inside of an EZ office.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzTIntersection">
            <summary>
            Represents a camera in an EZ T-Intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzXIntersection">
            <summary>
            Represents a camera in an EZ X-Intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Backstreet">
            <summary>
            Represents the camera facing the NUKE_SURFACE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Bridge">
            <summary>
            Represents the camera above the Gate A balcony.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EscapeZone">
            <summary>
            Represents the ESCAPE ZONE camera (facing toward the ESCAPE door).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Exit">
            <summary>
            Represents the EXIT camera (above the Class-D and Scientist extraction point).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Helipad">
            <summary>
            Represents the HELIPAD camera.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Streetcam">
            <summary>
            Represents the camera on the Gate B walkway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.SurfaceGate">
            <summary>
            Represents the camera facing the SURFACE_GATE door (Gate B side)
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.SurfaceGateA">
            <summary>
            Represents the camera outside of the Gate A elevator (surface).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Tower">
            <summary>
            Represents the camera on the tower at Gate A.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Corner">
            <summary>
            A corner, zone unknown (either LCZ, HCZ, or EZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.GateA">
            <summary>
            An unspecified camera related to Gate A - Either the camera in EZ, or the closest camera to the elevator on the surface.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.GateB">
            <summary>
            An unspecified camera related to Gate B - Either the camera in EZ, or the camera near the surface gate on the surface.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hallway">
            <summary>
            A hallway, zone unknown (either LCZ or HCZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Office">
            <summary>
            An office, zone unknown (either LCZ or EZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.TIntersection">
            <summary>
            A T-insection, zone unknown (either LCZ or HCZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.XIntersection">
            <summary>
            An X-intersection, zone unknown (either LCZ or HCZ).
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ConfigType">
            <summary>
            The different types of configuration files distribution.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ConfigType.Default">
            <summary>
            Default distribution, every plugin will share the same config file.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ConfigType.Separated">
            <summary>
            Separated distribution, each plugin will have an individual config file.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DamageType">
            <summary>
            Identifiers for types of damage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Unknown">
            <summary>
            Unknown damage source.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Falldown">
            <summary>
            Fall damage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Warhead">
            <summary>
            Alpha Warhead.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Decontamination">
            <summary>
            LCZ Decontamination.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Asphyxiation">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Asphyxiated"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Poison">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Poisoned"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Bleeding">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Bleeding"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Firearm">
            <summary>
            Damage dealt by a <see cref="T:Exiled.API.Features.Items.Firearm"/> when the <see cref="T:ItemType"/> used is not available.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.MicroHid">
            <summary>
            Damage dealt by a <see cref="T:Exiled.API.Features.Items.MicroHid"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Tesla">
            <summary>
            Damage dealt by a Tesla Gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp">
            <summary>
            Damage is dealt by a <see cref="F:Exiled.API.Enums.Side.Scp"/> when the <see cref="T:RoleType"/> used is not available.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Explosion">
            <summary>
            Damage dealt by frag grenades.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp018">
            <summary>
            Damage dealt by SCP-018.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp207">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Scp207"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Recontainment">
            <summary>
            Damage is dealt by SCP Recontainment procedure.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Crushed">
            <summary>
            Crushed by the checkpoint killer trigger.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.FemurBreaker">
            <summary>
            Damage caused by the femur breaker.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.PocketDimension">
            <summary>
            Damage caused by the pocket dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.FriendlyFireDetector">
            <summary>
            Damage caused by the friendly fire detector.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.SeveredHands">
            <summary>
            Damage caused by severed hands.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Custom">
            <summary>
            Damage caused by a custom source.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp049">
            <summary>
            Damage caused by <see cref="F:RoleType.Scp049"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp096">
            <summary>
            Damage caused by <see cref="F:RoleType.Scp096"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp173">
            <summary>
            Damage caused by <see cref="F:RoleType.Scp173"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp939">
            <summary>
            Damage caused by <see cref="F:RoleType.Scp93953"/> or <see cref="F:RoleType.Scp93989"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp0492">
            <summary>
            Damage caused by <see cref="F:RoleType.Scp0492"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp106">
            <summary>
            Damage caused by <see cref="F:RoleType.Scp106"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Crossvec">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCrossvec"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Logicer">
            <summary>
            Damage caused by <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Revolver">
            <summary>
            Damage caused by <see cref="F:ItemType.GunRevolver"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Shotgun">
            <summary>
            Damage caused by <see cref="F:ItemType.GunShotgun"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.AK">
            <summary>
            Damage caused by <see cref="F:ItemType.GunAK"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Com15">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCOM15"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Com18">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCOM18"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Fsp9">
            <summary>
            Damage caused by <see cref="F:ItemType.GunFSP9"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.E11Sr">
            <summary>
            Damage caused by <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Hypothermia">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Hypothermia"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.ParticleDisruptor">
            <summary>
            Damage caused by <see cref="F:ItemType.ParticleDisruptor"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorBeepType">
            <summary>
            Door beep types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.PermissionDenied">
            <summary>
            Permission denied beep.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.LockBypassDenied">
            <summary>
            Lock bypass is denied.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.InteractionDenied">
            <summary>
            Interaction denied.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.InteractionAllowed">
            <summary>
            Interaction allowed.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorLockType">
            <summary>
            All possible door locks.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.None">
            <summary>
            Unlocked.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Regular079">
            <summary>
            Regular SCP-079 door lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Lockdown079">
            <summary>
            SCP-079 lockdown room lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Warhead">
            <summary>
            Alpha Warhead detonation lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.AdminCommand">
            <summary>
            Locked via admin command.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.DecontLockdown">
            <summary>
            Locked by decontamination lockdown (after decon starts).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.DecontEvacuate">
            <summary>
            Locked by decontamination evacuation (during final countdown to decon).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.SpecialDoorFeature">
            <summary>
            Special door features.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.NoPower">
            <summary>
            Door has no power.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Isolation">
            <summary>
            Isloation.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Lockdown2176">
            <summary>
            Locked down by SCP-2176.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorType">
            <summary>
            Unique identifier for the different types of doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.UnknownDoor">
            <summary>
            Represents an unknown door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp914Door">
            <summary>
            Represents the 914 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GR18Inner">
            <summary>
            Represents the GR18_INNER door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp049Gate">
            <summary>
            Represents the Unsecured door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp049Armory">
            <summary>
            Represents the 049_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079First">
            <summary>
            Represents the 079_FIRST door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079Second">
            <summary>
            Represents the 079_SECOND door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp096">
            <summary>
            Represents the 096 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Bottom">
            <summary>
            Represents the 106_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Primary">
            <summary>
            Represents the 106_PRIMARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Secondary">
            <summary>
            Represents the 106_SECONDARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Gate">
            <summary>
            Represents the 173 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Connector">
            <summary>
            Represents the door between the 173 gate and the 173 armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Armory">
            <summary>
            Represents the 173_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Bottom">
            <summary>
            Represents the 173_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GR18Gate">
            <summary>
            Represents the GR18 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GR18">
            <inheritdoc cref="F:Exiled.API.Enums.DoorType.GR18Gate"/>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp914Gate">
            <summary>
            Represents the 914 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp914">
            <inheritdoc cref="F:Exiled.API.Enums.DoorType.Scp914Gate"/>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointEntrance">
            <summary>
            Represents the CHECKPOINT_ENT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointLczA">
            <summary>
            Represents the CHECKPOINT_LCZ_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointLczB">
            <summary>
            Represents the CHECKPOINT_LCZ_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EntranceDoor">
            <summary>
            Represents any entrance zone styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapePrimary">
            <summary>
            Represents the ESCAPE_PRIMARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapeSecondary">
            <summary>
            Represents the ESCAPE_SECONDARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ServersBottom">
            <summary>
            Represents the SERVERS_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GateA">
            <summary>
            Represents the GATE_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GateB">
            <summary>
            Represents the GATE_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HczArmory">
            <summary>
            Represents the HCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HeavyContainmentDoor">
            <summary>
            Represents any heavy containment styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HID">
            <summary>
            Represents the HID door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HIDLeft">
            <summary>
            Represents the HID_LEFT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HIDRight">
            <summary>
            Represents the HID_RIGHT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Intercom">
            <summary>
            Represents the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczArmory">
            <summary>
            Represents the LCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczCafe">
            <summary>
            Represents the LCZ_CAFE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczWc">
            <summary>
            Represents the LCZ_WC door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LightContainmentDoor">
            <summary>
            Represents any light containment styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.NukeArmory">
            <summary>
            Represents the NUKE_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.NukeSurface">
            <summary>
            Represents the NUKE_SURFACE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.PrisonDoor">
            <summary>
            Represents any of the Class-D cell doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.SurfaceGate">
            <summary>
            Represents the SURFACE_GATE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp330">
            <summary>
            Represents the 330 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp330Chamber">
            <summary>
            Represents the 330_CHAMBER door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp012">
            <summary>
            Represents the 012 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp012Bottom">
            <summary>
            Represents the 012_BOTTOM door.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EffectType">
            <summary>
            Status effects as enum.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Amnesia">
            <summary>
            The player isn't able to open their inventory or reload a weapon.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Asphyxiated">
            <summary>
            Drains the player's stamina and then health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Bleeding">
            <summary>
            Damages the player over time.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Blinded">
            <summary>
            Blurs the player's screen.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Burned">
            <summary>
            Increases damage the player receives. Does not apply any standalone damage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Concussed">
            <summary>
            Blurs the player's screen while rotating.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Corroding">
            <summary>
            Teleports the player to the pocket dimension and drains health until the player escapes or is killed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Deafened">
            <summary>
            Deafens the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Decontaminating">
            <summary>
            Removes 10% of the player's health per second.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Disabled">
            <summary>
            Slows down the player's movement.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Ensnared">
            <summary>
            Prevents the player from moving.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Exhausted">
            <summary>
            Halves the player's maximum stamina and stamina regeneration rate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Flashed">
            <summary>
            Flashes the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Hemorrhage">
            <summary>
            Drains the player's health while sprinting.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Invigorated">
            <summary>
            Reduces the player's FOV, gives infinite stamina and gives the effect of underwater sound.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.BodyshotReduction">
            <summary>
            Reduces damage taken by body shots.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Poisoned">
            <summary>
            Damages the player every 5 seconds, starting low and increasing over time.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp207">
            <summary>
            Increases the speed of the player while also draining health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Invisible">
            <summary>
            Makes the player invisible.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SinkHole">
            <summary>
            Slows down the player's movement with the SCP-106 sinkhole effect.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Visuals939">
            <summary>
            Gives the player the SCP-939 sound vision.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.DamageReduction">
            <summary>
            Reduces overall damage taken.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.MovementBoost">
            <summary>
            Increases movement speed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.RainbowTaste">
            <summary>
            Severely reduces damage taken.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SeveredHands">
            <summary>
            Drops the player's current item and deals damage while effect is active.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Stained">
            <summary>
            Prevents the player from sprinting and reduces movement speed by 20%.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Visual173Blink">
            <summary>
            Causes the player to blink.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Vitality">
            <summary>
            Causes the player to slowly regenerate health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Hypothermia">
            <summary>
            Cause the player to slowly take damage by Hyporthermia.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp1853">
            <summary>
            Cause the player more effective for fight.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ElevatorType">
            <summary>
            The unique type of elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Unknown">
            <summary>
            Unknown elevator Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateA">
            <summary>
            Entrance Gate A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateB">
            <summary>
            Entrance Gate B elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Nuke">
            <summary>
            Heavy Containment Zone Nuke elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Scp049">
            <summary>
            Heavy Containment Zone SCP-049 elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczA">
            <summary>
            Light Containment Zone checkpoint A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczB">
            <summary>
            Light Containment Zone checkpoint B elevator.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EnvironmentType">
            <summary>
            A set of environment types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Development">
            <summary>
            The development environment, for developers.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Testing">
            <summary>
            The testing environment, for testing things.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Production">
            <summary>
            The production environment, for the public.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Ptb">
            <summary>
            The ptb environment, for Public Test Builds.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.GeneratorState">
            <summary>
            Generator states.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Unlocked">
            <summary>
            Generator is unlocked.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Open">
            <summary>
            Generator is open.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Activating">
            <summary>
            Generator is activating.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Engaged">
            <summary>
            Generator is engaged.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.GlassType">
            <summary>
            Unique identifier for the different types of Window.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Unknown">
            <summary>
            Represents an unknown Window.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.GR18">
            <summary>
            Represents all the Window in <see cref="F:Exiled.API.Enums.RoomType.LczGlassBox"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp049">
            <summary>
            Represents all the Window in <see cref="F:Exiled.API.Enums.RoomType.Hcz049"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.MicroHid">
            <summary>
            Represents all the Window in <see cref="F:Exiled.API.Enums.RoomType.HczHid"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp079">
            <summary>
            Represents all the Window in <see cref="F:Exiled.API.Enums.RoomType.Hcz079"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp079Trigger">
            <summary>
            Represents the <see cref="P:Exiled.API.Features.Recontainer.ActivatorWindow"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp330">
            <summary>
            Represents all the Window in <see cref="F:Exiled.API.Enums.RoomType.Lcz330"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Plants">
            <summary>
            Represents all the Window in <see cref="F:Exiled.API.Enums.RoomType.LczPlants"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.GrenadeType">
            <summary>
            The unique type of grenade.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.FragGrenade">
            <summary>
            Frag grenade.
            Used by <see cref="F:ItemType.GrenadeHE"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.Flashbang">
            <summary>
            Flashbang.
            Used by <see cref="F:ItemType.GrenadeFlash"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.Scp018">
            <summary>
            SCP-018 ball.
            Used by <see cref="F:ItemType.SCP018"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.Scp2176">
            <summary>
            SCP-2176 lightbulb.
            Used by <see cref="F:ItemType.SCP2176"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.HotkeyButton">
            <summary>
            Hotkey button types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.HotkeyButton.Keycard">
            <summary>
            The hotkey button for selecting the keycard.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.HotkeyButton.PrimaryFirearm">
            <summary>
            The hotkey button for selecting the primary firearm.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.HotkeyButton.SecondaryFirearm">
            <summary>
            The hotkey button for selecting the secondary firearm.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.HotkeyButton.Medical">
            <summary>
            The hotkey button for selecting the medical item.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.HotkeyButton.Grenade">
            <summary>
            The hotkey button for selecting the grenade.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.KeycardPermissions">
            <summary>
            The types of permissions assigned to keycards.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.Checkpoints">
            <summary>
            Opens checkpoints.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ExitGates">
            <summary>
            Opens <see cref="F:Exiled.API.Enums.DoorType.GateA">Gate A</see> and <see cref="F:Exiled.API.Enums.DoorType.GateB">Gate B</see>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.Intercom">
            <summary>
            Opens <see cref="F:Exiled.API.Enums.DoorType.Intercom">the Intercom door</see>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.AlphaWarhead">
            <summary>
            Opens the Alpha Warhead detonation room on surface.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelOne">
            <summary>
            Opens <see cref="F:Exiled.API.Enums.DoorType.Scp914Gate"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelTwo">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelOne"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.Checkpoints"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelThree">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelTwo"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.Intercom"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.AlphaWarhead"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelOne">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.Checkpoints"/>, Opens Light Containment armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelTwo">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelOne"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.ExitGates"/>, Opens Heavy Containment armories.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelThree">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelTwo"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.Intercom"/>, Opens MicroHID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ScpOverride">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.Checkpoints"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.LeadingTeam">
            <summary>
            The team that is currently leading the round.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.FacilityForces">
            <summary>
            Represents the Scientists, Guards, and NTF team.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.ChaosInsurgency">
            <summary>
            Represents the Class-D and Chaos Insurgency team.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Anomalies">
            <summary>
            Represents the SCP team.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Draw">
            <summary>
            Represents a draw.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.PluginPriority">
            <summary>
            Provides simple and readable plugin priority values.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Default">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Medium"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Last">
            <summary>
            Execute the plugin last, after other ones.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lowest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Last"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lower">
            <summary>
            Default plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Low">
            <summary>
            Low plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Medium">
            <summary>
            Medium plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.High">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Higher">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Highest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.First"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.First">
            <summary>
            Execute the plugin first, before other ones.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RadioRange">
            <summary>
            All possible <see cref="T:Radio"/> ranges.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Disabled">
            <summary>
            The radio is disabled.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Short">
            <summary>
            The shortest range with the least battery usage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Medium">
            <summary>
            The standard, default range.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Long">
            <summary>
            A longer range with increased battery usage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Ultra">
            <summary>
            The longest range with the most battery usage.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RespawnEffectType">
            <summary>
            Layers game respawn effects.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.PlayChaosInsurgencyMusic">
            <summary>
            Plays the <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/> music to alive <see cref="F:RoleType.ClassD"/> and <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonChaosInsurgencyVan">
            <summary>
            Summons the <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/> van.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RoomType">
            <summary>
            Unique identifier for the different types of rooms.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Unknown">
            <summary>
            Unknown Room Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczArmory">
            <summary>
            Lower Containment Armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCurve">
            <summary>
            Lower Containment L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczStraight">
            <summary>
            Lower Containment |-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz012">
            <summary>
            Lower Containment SCP-012 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz914">
            <summary>
            Lower Containment SCP-914 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCrossing">
            <summary>
            Lower Containment X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczTCross">
            <summary>
            Lower Containment T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCafe">
            <summary>
            Lower Containment Cafe Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczPlants">
            <summary>
            Lower Containment T-Shaped Plants Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczToilets">
            <summary>
            Lower Containment Toilets Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczAirlock">
            <summary>
            Lower Containment Airlock Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz173">
            <summary>
            Lower Containment SCP-173 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczClassDSpawn">
            <summary>
            Lower Containment Class-D Spawn Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczChkpB">
            <summary>
            Lower Containment Checkpoint B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczGlassBox">
            <summary>
            Lower Containment Glass Box Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczChkpA">
            <summary>
            Lower Containment Checkpoint A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz079">
            <summary>
            Heavy Containment SCP-079 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczEzCheckpoint">
            <summary>
            Heavy Containment Entrance Checkpoint Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczArmory">
            <summary>
            Heavy Containment T-Shaped Armory Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz939">
            <summary>
            Heavy Containment SCP-939 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczHid">
            <summary>
            Heavy Containment HID-Spawn Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz049">
            <summary>
            Heavy Containment SCP-049 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczChkpA">
            <summary>
            Heavy Containment Checkpoint A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCrossing">
            <summary>
            Heavy Containment X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz106">
            <summary>
            Heavy Containment SCP-106 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczNuke">
            <summary>
            Heavy Containment Nuke Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTesla">
            <summary>
            Heavy Containment Tesla Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczServers">
            <summary>
            Heavy Containment Servers Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczChkpB">
            <summary>
            Heavy Containment Checkpoint B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTCross">
            <summary>
            Heavy Containment T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCurve">
            <summary>
            Heavy Containment L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz096">
            <summary>
            Heavy Containment SCP-096 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzVent">
            <summary>
            Entrance Red Vent Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzIntercom">
            <summary>
            Entrance Intercom Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateA">
            <summary>
            Entrance Gate A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzDownstairsPcs">
            <summary>
            Entrance PC Room With Downstairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCurve">
            <summary>
            Entrance L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzPcs">
            <summary>
            Entrance PC Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCrossing">
            <summary>
            Entrance X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCollapsedTunnel">
            <summary>
            Entrance Red Collapsed Tunnel Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzConference">
            <summary>
            Entrance |-Shaped Dr.L Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzStraight">
            <summary>
            Entrance |-Shaped Room
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCafeteria">
            <summary>
            Entrance Cafeteria Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzUpstairsPcs">
            <summary>
            Entrance PC Room With Upstairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateB">
            <summary>
            Entrance Gate B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzShelter">
            <summary>
            Entrance Shelter Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Pocket">
            <summary>
            Pocket Dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Surface">
            <summary>
            The Surface.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczStraight">
            <summary>
            Heavy Containment |-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzTCross">
            <summary>
            Entrance T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz330">
            <summary>
            Lower Containment SCP-330 Room.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ShootingTargetButton">
            <summary>
            Possible shooting target buttons.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.IncreaseHp">
            <summary>
            Increase HP button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.DecreaseHp">
            <summary>
            Decrease HP button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.IncreaseResetTime">
            <summary>
            Increase reset time button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.DecreaseResetTime">
            <summary>
            Decrease reset time button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.Reset">
            <summary>
            Reset button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.Remove">
            <summary>
            Remove button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.ToggleSync">
            <summary>
            Toggle sync mode button.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ShootingTargetType">
            <summary>
            Shooting target types present in the game.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.Unknown">
            <summary>
            Unknown target.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.Sport">
            <summary>
            Radial sport target.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.ClassD">
            <summary>
            D-Class target.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.Binary">
            <summary>
            Binary target.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.Side">
            <summary>
            In which side a certain <see cref="T:RoleType"/> belongs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Scp">
            <summary>
            SCP team. Same as <see cref="F:Team.SCP"/>.
            Contains all SCP-related roles: <see cref="F:RoleType.Scp049"/>, <see cref="F:RoleType.Scp0492"/>, <see cref="F:RoleType.Scp079"/>, <see cref="F:RoleType.Scp096"/>,
            <see cref="F:RoleType.Scp106"/>, <see cref="F:RoleType.Scp173"/>, <see cref="F:RoleType.Scp93953"/>, and <see cref="F:RoleType.Scp93989"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Mtf">
            <summary>
            Mobile Task Forces team.
            Contains <see cref="F:RoleType.Scientist"/>, <see cref="F:RoleType.FacilityGuard"/>, <see cref="F:RoleType.NtfPrivate"/>, <see cref="F:RoleType.NtfSergeant"/>,
            <see cref="F:RoleType.NtfCaptain"/> and <see cref="F:RoleType.NtfSpecialist"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.ChaosInsurgency">
            <summary>
            Chaos Insurgency team.
            Contains <see cref="F:RoleType.ClassD"/>, <see cref="F:RoleType.ChaosConscript"/>, <see cref="F:RoleType.ChaosRepressor"/>, <see cref="F:RoleType.ChaosRifleman"/> and <see cref="F:RoleType.ChaosMarauder"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Tutorial">
            <summary>
            Tutorial team. Contains <see cref="F:RoleType.Tutorial"/>. Same as <see cref="F:Team.TUT"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.None">
            <summary>
            No team. Same as <see cref="F:Team.RIP"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.SpawnReason">
            <summary>
            Possible spawn reasons.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.None">
            <summary>
            No reason specified.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.RoundStart">
            <summary>
            The round has just started.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.LateJoin">
            <summary>
            The player joined and the round recently started.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Respawn">
            <summary>
            The player was dead and is respawning.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Died">
            <summary>
            The player has died.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Escaped">
            <summary>
            The player has escaped.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Revived">
            <summary>
            The player was revived by SCP-049.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.ForceClass">
            <summary>
            The player's role was changed by an admin command or plugin.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Overwatch">
            <summary>
            The user has entered Overwatch mode.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ThrowRequest">
            <summary>
            Possible throwable throw types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.BeginThrow">
            <summary>
            Requesting to begin throwing a throwable item.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.WeakThrow">
            <summary>
            Requesting to confirm a weak throw.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.FullForceThrow">
            <summary>
            Requesting to confirm a strong throw.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.WarheadStatus">
            <summary>
            All the available warhead statuses.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.NotArmed">
            <summary>
            The warhead is not armed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.Armed">
            <summary>
            The warhead is armed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.InProgress">
            <summary>
            The warhead detonation is in progress.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.Detonated">
            <summary>
            The warhead has detonated.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ZoneType">
            <summary>
            Facility zone types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Surface">
            <summary>
            The Surface Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Entrance">
            <summary>
            The Entrance Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.HeavyContainment">
            <summary>
            The Heavy Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.LightContainment">
            <summary>
            The Light Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Unspecified">
            <summary>
            An unspecified zone.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.DamageTypeExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Enums.DamageType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.DamageTypeExtensions.TranslationIdConversion">
            <summary>
            Gets conversion information between <see cref="F:PlayerStatsSystem.DeathTranslation.Id"/>s and <see cref="T:Exiled.API.Enums.DamageType"/>s.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.DamageTypeExtensions.TranslationConversion">
            <summary>
            Gets conversion information between <see cref="T:PlayerStatsSystem.DeathTranslation"/>s and <see cref="T:Exiled.API.Enums.DamageType"/>s.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.DamageTypeExtensions.ItemConversion">
            <summary>
            Gets conversion information between <see cref="T:ItemType"/>s and <see cref="T:Exiled.API.Enums.DamageType"/>s.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.IsWeapon(Exiled.API.Enums.DamageType,System.Boolean)">
            <summary>
            Check if a <see cref="T:Exiled.API.Enums.DamageType">damage type</see> is caused by weapon.
            </summary>
            <param name="type">The damage type to be checked.</param>
            <param name="checkMicro">Indicates whether the MicroHid damage type should be taken into account or not.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.DamageType"/> is caused by weapon or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.IsScp(Exiled.API.Enums.DamageType,System.Boolean)">
            <summary>
            Check if a <see cref="T:Exiled.API.Enums.DamageType">damage type</see> is caused by SCP.
            </summary>
            <param name="type">The damage type to be checked.</param>
            <param name="checkItems">Indicates whether the SCP-items damage types should be taken into account or not.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.DamageType"/> is caused by SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.IsStatusEffect(Exiled.API.Enums.DamageType)">
            <summary>
            Check if a <see cref="T:Exiled.API.Enums.DamageType">damage type</see> is caused by status effect.
            </summary>
            <param name="type">The damage type to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.DamageType"/> is caused by status effect or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.GetDamageType(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.DamageType"/> of an <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>s.
            </summary>
            <param name="damageHandlerBase">The DamageHandler you want to get the DamageType.</param>
            <returns>Return the <see cref="T:Exiled.API.Enums.DamageType"/> of the <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.EffectTypeExtension">
            <summary>
            Contains an extension method to get <see cref="T:System.Type"/> from <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.Type(Exiled.API.Enums.EffectType)">
            <summary>
            Gets an instance of <see cref="T:System.Type"/> points to an effect.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> enum.</param>
            <returns>The <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.ItemExtensions">
            <summary>
            A set of extensions for <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsAmmo(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an ammo.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an ammo or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsWeapon(ItemType,System.Boolean)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a weapon.
            </summary>
            <param name="type">The item to be checked.</param>
            <param name="checkMicro">Indicates whether the MicroHID item should be taken into account or not.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a weapon or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsScp(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an SCP.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsThrowable(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a throwable item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a throwable item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsMedical(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a medical item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a medical item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsUtility(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a utility item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an utilty item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsArmor(ItemType)">
            <summary>
            Check if a <see cref="T:ItemType"/> is an armor item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an armor or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsKeycard(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a keycard.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a keycard or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetMaxAmmo(ItemType)">
            <summary>
            Gets the default ammo of a weapon.
            </summary>
            <param name="item">The <see cref="T:ItemType">item</see> that you want to get durability of.</param>
            <returns>Returns the item durability.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetWeaponAmmoType(ItemType)">
            <summary>
            Returns the <see cref="T:Exiled.API.Enums.AmmoType"/> of the weapon is using.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to convert.</param>
            <returns>The given weapon's AmmoType.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAmmoType(ItemType)">
            <summary>
            Converts a valid ammo <see cref="T:ItemType"/> into an <see cref="T:Exiled.API.Enums.AmmoType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to convert.</param>
            <returns>The ammo type of the given item type.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.AmmoType)">
            <summary>
            Converts an <see cref="T:Exiled.API.Enums.AmmoType"/> into it's corresponding <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.AmmoType"/> to convert.</param>
            <returns>The Item type of the specified ammo.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.GrenadeType)">
            <summary>
            Converts a <see cref="T:Exiled.API.Enums.GrenadeType"/> into the corresponding <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.GrenadeType"/> to convert.</param>
            <returns>The Item type of the specified grenade.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemTypes(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Items.Item"/>s into the corresponding <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ItemType"/>s.
            </summary>
            <param name="items">The items to convert.</param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ItemType"/>s.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAttachmentIdentifiers(ItemType,System.UInt32)">
            <summary>
            Gets all <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>s present on an <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to iterate over.</param>
            <param name="code">The <see cref="T:System.UInt32"/> value which represents the attachments code to check.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> value which represents all the attachments present on the specified <see cref="T:ItemType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.TryGetAttachments(ItemType,System.UInt32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}@)">
            <summary>
            Tries to get all <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>s present on an <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to iterate over.</param>
            <param name="code">The <see cref="T:System.UInt32"/> value which represents the attachments code to check.</param>
            <param name="identifiers">The attachments present on the specified <see cref="T:ItemType"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:ItemType"/> is a weapon.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAttachmentsCode(System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Gets the value resulting from the sum of all elements within a specific <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="identifiers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compute.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the attachments code.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAttachmentIdentifiers(Exiled.API.Features.Items.Firearm)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> from a specified <see cref="T:Exiled.API.Features.Items.Firearm"/>.
            </summary>
            <param name="firearm">The specified <see cref="T:Exiled.API.Features.Items.Firearm"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> which contains all the firearm's attachments.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetBaseCode(ItemType)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.BaseCode"/> of the specified <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to check.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Enums.BaseCode"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.MirrorExtensions">
            <summary>
            A set of extensions for <see cref="N:Mirror"/> Networking.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.WriterExtensions">
            <summary>
            Gets <see cref="T:System.Reflection.MethodInfo"/> corresponding to <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SyncVarDirtyBits">
            <summary>
            Gets a all DirtyBit <see cref="T:System.UInt64"/> from <see cref="T:Exiled.API.Extensions.StringExtensions"/>(format:classname.methodname).
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SetDirtyBitsMethodInfo">
            <summary>
            Gets a <see cref="M:Mirror.NetworkBehaviour.SetDirtyBit(System.UInt64)"/>'s <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SendSpawnMessageMethodInfo">
            <summary>
            Gets a NetworkServer.SendSpawnMessage's <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.Shake(Exiled.API.Features.Player)">
            <summary>
            Shaking target <see cref="T:Exiled.API.Features.Player"/> window.
            </summary>
            <param name="player">Target to shake.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayBeepSound(Exiled.API.Features.Player)">
            <summary>
            Play beep sound to <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">Target to play.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetPlayerInfoForTargetOnly(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String)">
            <summary>
            Set <see cref="P:NicknameSync.Network_customPlayerInfoString"/> that only <see cref="T:Exiled.API.Features.Player"/> can see.
            </summary>
            <param name="player">Only this player can see info.</param>
            <param name="target">Target to set info.</param>
            <param name="info">Setting info.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayGunSound(Exiled.API.Features.Player,UnityEngine.Vector3,ItemType,System.Byte,System.Byte)">
            <summary>
            Plays gun sound.
            </summary>
            <param name="player">Target to play.</param>
            <param name="position">Position to play on.</param>
            <param name="itemType">Weapon' sound to play.</param>
            <param name="volume">Sound's volume to set.</param>
            <param name="audioClipId">GunAudioMessage's audioClipId to set (default = 0).</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetRoomColorForTargetOnly(Exiled.API.Features.Room,Exiled.API.Features.Player,UnityEngine.Color)">
            <summary>
            Set <see cref="P:FlickerableLightController.Network_warheadLightColor"/> that only <see cref="T:Exiled.API.Features.Player"/> can see.
            </summary>
            <param name="room">Room to modify.</param>
            <param name="target">Only this player can see room color.</param>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetRoomLightIntensityForTargetOnly(Exiled.API.Features.Room,Exiled.API.Features.Player,System.Single)">
            <summary>
            Set <see cref="P:FlickerableLightController.Network_lightIntensityMultiplier"/> that only <see cref="T:Exiled.API.Features.Player"/> can see.
            </summary>
            <param name="room">Room to modify.</param>
            <param name="target">Only this player can see room color.</param>
            <param name="multiplier">Light intensity multiplier to set.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ChangeAppearance(Exiled.API.Features.Player,RoleType)">
            <summary>
            Change <see cref="T:Exiled.API.Features.Player"/> character model for appearance.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:RoleType"/> changes.
            </summary>
            <param name="player">Player to change.</param>
            <param name="type">Model type.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayCassieAnnouncement(Exiled.API.Features.Player,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Send CASSIE announcement that only <see cref="T:Exiled.API.Features.Player"/> can hear.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:RoleType"/> changes.
            </summary>
            <param name="player">Target to send.</param>
            <param name="words">Announcement words.</param>
            <param name="makeHold">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isHeld.</param>
            <param name="makeNoise">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isNoisy.</param>
            <param name="isSubtitles">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isSubtitles.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.MessageTranslated(Exiled.API.Features.Player,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Send CASSIE announcement with custom subtitles for translation that only <see cref="T:Exiled.API.Features.Player"/> can hear and see it.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:RoleType"/> changes.
            </summary>
            <param name="player">Target to send.</param>
            <param name="words">The message to be reproduced.</param>
            <param name="translation">The translation should be show in the subtitles.</param>
            <param name="makeHold">Same on <see cref="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isHeld.</param>
            <param name="makeNoise">Same on <see cref="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isNoisy.</param>
            <param name="isSubtitles">Same on <see cref="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isSubtitles.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ChangeWalkingSpeed(Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Changes the <see cref="T:Exiled.API.Features.Player"/>'s walking speed. Negative values will invert the player's controls.
            </summary>
            <param name="player">Player to change.</param>
            <param name="multiplier">Speed multiplier.</param>
            <param name="useCap">Allow <paramref name="multiplier"></paramref> values to be larger than safe amount.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ChangeRunningSpeed(Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Changes the <see cref="T:Exiled.API.Features.Player"/>'s running speed. Negative values will invert the player's controls.
            </summary>
            <param name="player">Player to change.</param>
            <param name="multiplier">Speed multiplier.</param>
            <param name="useCap">Allow <paramref name="multiplier"></paramref> values to be larger than safe amount.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeSyncVar(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.String,System.Object)">
            <summary>
            Send fake values to client's <see cref="T:Mirror.SyncVarAttribute"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="propertyName">Property name starting with Network.</param>
            <param name="value">Value of send to target.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ResyncSyncVar(Mirror.NetworkIdentity,System.Type,System.String)">
            <summary>
            Force resync to client's <see cref="T:Mirror.SyncVarAttribute"/>.
            </summary>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="propertyName">Property name starting with Network.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeTargetRpc(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.String,System.Object[])">
            <summary>
            Send fake values to client's <see cref="T:Mirror.ClientRpcAttribute"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="rpcName">Property name starting with Rpc.</param>
            <param name="values">Values of send to target.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeSyncObject(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.Action{Mirror.NetworkWriter})">
            <summary>
            Send fake values to client's <see cref="T:Mirror.SyncObject"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="customAction">Custom writing action.</param>
            <example>
            EffectOnlySCP207.
            <code>
             MirrorExtensions.SendCustomSync(player, player.ReferenceHub.networkIdentity, typeof(PlayerEffectsController), (writer) => {
              writer.WriteUInt64(1ul);                                           // DirtyObjectsBit
              writer.WriteUInt32(1);                                             // DirtyIndexCount
              writer.WriteByte((byte)SyncList&lt;byte&gt;.Operation.OP_SET);     // Operations
              writer.WriteUInt32(17);                                            // EditIndex
              writer.WriteByte(1);                                               // Value
             });
            </code>
            </example>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.EditNetworkObject(Mirror.NetworkIdentity,System.Action{Mirror.NetworkIdentity})">
            <summary>
            Edit <see cref="T:Mirror.NetworkIdentity"/>'s parameter and sync.
            </summary>
            <param name="identity">Target object.</param>
            <param name="customAction">Edit function.</param>
        </member>
        <member name="T:Exiled.API.Extensions.ReflectionExtensions">
            <summary>
            A set of extensions for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.ReflectionExtensions.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invoke a static method.
            </summary>
            <param name="type">The method type.</param>
            <param name="methodName">The method name.</param>
            <param name="param">The method parameters.</param>
        </member>
        <member name="M:Exiled.API.Extensions.ReflectionExtensions.CopyProperties(System.Object,System.Object)">
            <summary>
            Copy all properties from the source class to the target one.
            </summary>
            <param name="target">The target object.</param>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:Exiled.API.Extensions.RoleExtensions">
            <summary>
            A set of extensions for <see cref="T:RoleType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetColor(RoleType)">
            <summary>
            Get a <see cref="T:RoleType">role's</see> <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="role">The <see cref="T:RoleType"/> to get the color of.</param>
            <returns>The <see cref="T:UnityEngine.Color"/> of the role.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetSide(RoleType)">
            <summary>
            Get a <see cref="T:RoleType">role's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="role">The <see cref="T:RoleType"/> to check the side of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetSide(Team)">
            <summary>
            Get a <see cref="T:Team">team's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="team">The <see cref="T:Team"/> to get the <see cref="T:Exiled.API.Enums.Side"/> of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>.
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetTeam(RoleType)">
            <summary>
            Get the <see cref="T:Team"/> of the given <see cref="T:RoleType"/>.
            </summary>
            <param name="roleType">Role.</param>
            <returns><see cref="T:Team"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetLeadingTeam(Team)">
            <summary>
            Get the <see cref="T:Exiled.API.Enums.LeadingTeam"/>.
            </summary>
            <param name="team">Team.</param>
            <returns><see cref="T:Exiled.API.Enums.LeadingTeam"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetRandomSpawnProperties(RoleType)">
            <summary>
            Gets a random spawn point of a <see cref="T:RoleType"/>.
            </summary>
            <param name="roleType">The <see cref="T:RoleType"/> to get the spawn point from.</param>
            <returns>Returns the spawn point <see cref="T:UnityEngine.Vector3"/> and rotation <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.SpawnExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.CustomItems.API.SpawnLocation"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Extensions.SpawnExtensions.ReversedLocations">
            <summary>
            The names of spawn locations who's positions are on the opposite side of their door, and must be corrected.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.SpawnExtensions.GetDoor(Exiled.CustomItems.API.SpawnLocation)">
            <summary>
            Tries to get the <see cref="T:UnityEngine.Transform"/> of the door used for a specific <see cref="T:Exiled.CustomItems.API.SpawnLocation"/>.
            </summary>
            <param name="location">The <see cref="T:Exiled.CustomItems.API.SpawnLocation"/> to check.</param>
            <returns>The <see cref="T:UnityEngine.Transform"/> used for that spawn location. Can be <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.SpawnExtensions.GetPosition(Exiled.CustomItems.API.SpawnLocation)">
            <summary>
            Tries to get the <see cref="T:UnityEngine.Vector3"/> used for a specific <see cref="T:Exiled.CustomItems.API.SpawnLocation"/>.
            </summary>
            <param name="location">The <see cref="T:Exiled.CustomItems.API.SpawnLocation"/> to check.</param>
            <returns>The <see cref="T:UnityEngine.Vector3"/> used for that spawn location. Can be <see cref="P:UnityEngine.Vector3.zero"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.SpawnExtensions.GetDoorName(Exiled.CustomItems.API.SpawnLocation)">
            <summary>
            The names of the doors attached to each spawn location.
            </summary>
            <param name="spawnLocation">The <see cref="T:Exiled.CustomItems.API.SpawnLocation"/>.</param>
            <returns>Returns the door name.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.StringExtensions">
            <summary>
            A set of extensions for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetDistance(System.String,System.String)">
            <summary>
            Compute the distance between two <see cref="T:System.String"/>.
            </summary>
            <param name="firstString">The first string to be compared.</param>
            <param name="secondString">The second string to be compared.</param>
            <returns>Returns the distance between the two strings.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.ExtractCommand(System.String)">
            <summary>
            Extract command name and arguments from a <see cref="T:System.String"/>.
            </summary>
            <param name="commandLine">The <see cref="T:System.String"/> to extract from.</param>
            <returns>Returns a <see cref="T:System.ValueTuple"/> containing the exctracted command name and arguments.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.ToSnakeCase(System.String,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.String"/> to snake_case convention.
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="shouldReplaceSpecialChars">Indicates whether special chars has to be replaced or not.</param>
            <returns>Returns the new snake_case string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a string.
            </summary>
            <typeparam name="T">The type of the IEnumerable.</typeparam>
            <param name="enumerable">The instance.</param>
            <param name="showIndex">Indicates whether the enumerator index should be shown or not.</param>
            <returns>Returns the converted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.RemoveBracketsOnEndOfName(System.String)">
            <summary>
            Removes the prefab-generated brackets (#) on <see cref="T:UnityEngine.GameObject"/> names.
            </summary>
            <param name="name">Name of the <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>Name without brackets.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetBefore(System.String,System.Char)">
            <summary>
            Retrieves a string before a symbol from an input.
            </summary>
            <param name="input">The input.</param>
            <param name="symbol">The symbol.</param>
            <returns>Substring before the symbol.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Splits camel case string to space-separated words. Ex: SomeCamelCase -> Some Camel Case.
            </summary>
            <param name="input">Camel case string.</param>
            <returns>Splitted string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.RemoveSpaces(System.String)">
            <summary>
            Removes all space symbols from string.
            </summary>
            <param name="input">Input string.</param>
            <returns>String without spaces.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetRawUserId(System.String)">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
            <param name="userId">The user id.</param>
            <returns>Returns the raw user id.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetHashedUserId(System.String)">
            <summary>
            Gets a SHA256 hash of a player's user id without the authentication.
            </summary>
            <param name="userId">The user id.</param>
            <returns>The hashed userid.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.UserGroupExtensions">
            <summary>
            Contains a useful extension to compare two <see cref="T:UserGroup"/>'s.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.UserGroupExtensions.EqualsTo(UserGroup,UserGroup)">
            <summary>
            Compares two <see cref="T:UserGroup"/>'s for equality.
            </summary>
            <param name="this">The first <see cref="T:UserGroup"/>.</param>
            <param name="other">The second <see cref="T:UserGroup"/>.</param>
            <returns><see langword="true"/> if they are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.UserGroupExtensions.GetKey(UserGroup)">
            <summary>
            Searches for a key of a group in the <see cref="T:PermissionsHandler">RemoteAdmin</see> config.
            </summary>
            <param name="this">The <see cref="T:UserGroup"/>.</param>
            <returns>The key of that group, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.UserGroupExtensions.GetValue(System.String)">
            <summary>
            Searches for a value of a group in the <see cref="T:PermissionsHandler">RemoteAdmin</see> config.
            </summary>
            <param name="groupName">The <see cref="T:System.String"/>.</param>
            <returns>The value of that group, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="T:Exiled.API.Features.Attributes.CustomAbilityAttribute">
            <summary>
            An attribute to easily manage CustomAbility initialization.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Attributes.CustomItemAttribute">
            <summary>
            An attribute to easily manage CustomItem initialization.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Attributes.CustomItemAttribute.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Attributes.CustomItemAttribute"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to serialize.</param>
        </member>
        <member name="P:Exiled.API.Features.Attributes.CustomItemAttribute.ItemType">
            <summary>
            Gets the attribute's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Attributes.CustomRoleAttribute">
            <summary>
            An attribute to easily manage CustomRole initialization.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Attributes.CustomRoleAttribute.#ctor(RoleType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Attributes.CustomRoleAttribute"/> class.
            </summary>
            <param name="type">The <see cref="T:RoleType"/> to serialize.</param>
        </member>
        <member name="P:Exiled.API.Features.Attributes.CustomRoleAttribute.RoleType">
            <summary>
            Gets the attribute's <see cref="T:RoleType"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Badge">
            <summary>
            Represents the in-game badge.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Badge.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Badge"/> struct.
            </summary>
            <param name="text">The badge text.</param>
            <param name="color">The badge color.</param>
            <param name="type">The badge type.</param>
            <param name="isGlobal">Indicates whether the badge is global or not.</param>
        </member>
        <member name="P:Exiled.API.Features.Badge.Text">
            <summary>
            Gets the badge text.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Color">
            <summary>
            Gets the badge color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Type">
            <summary>
            Gets the badge type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.IsGlobal">
            <summary>
            Gets a value indicating whether the badge is global or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Broadcast">
            <summary>
            Useful class to save broadcast configs in a cleaner way.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor(System.String,System.UInt16,System.Boolean,Broadcast.BroadcastFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
            <param name="content">The content of the broadcast>.</param>
            <param name="duration">The duration of the broadcast, in seconds.</param>
            <param name="show">Whether or not the broadcast should be shown.</param>
            <param name="type">The type of the broadcast.</param>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Content">
            <summary>
            Gets or sets the broadcast content.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Duration">
            <summary>
            Gets or sets the broadcast duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Type">
            <summary>
            Gets or sets the broadcast type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Show">
            <summary>
            Gets or sets a value indicating whether the broadcast should be shown or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Camera">
            <summary>
            The in-game Camera079.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Camera.CamerasValue">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Camera"/>s on the map.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Camera.#ctor(Camera079)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Camera"/> class.
            </summary>
            <param name="camera079">The base camera.</param>
        </member>
        <member name="P:Exiled.API.Features.Camera.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the <see cref="T:Exiled.API.Features.Camera"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Random">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Camera"/>.
            </summary>
            <returns><see cref="T:Exiled.API.Features.Camera"/> object.</returns>
        </member>
        <member name="P:Exiled.API.Features.Camera.Base">
            <summary>
            Gets the base <see cref="T:Camera079"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.GameObject">
            <summary>
            Gets the camera's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Name">
            <summary>
            Gets the camera's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Id">
            <summary>
            Gets the camera's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Room">
            <summary>
            Gets the camera's <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Zone">
            <summary>
            Gets the camera's <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Type">
            <summary>
            Gets the camera's <see cref="T:Exiled.API.Enums.CameraType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Transform">
            <summary>
            Gets the camera's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.HeadPosition">
            <summary>
            Gets the position of the camera's head.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.HeadRotation">
            <summary>
            Gets or sets the rotation of the camera's head.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Position">
            <summary>
            Gets the camera's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Pitch">
            <summary>
            Gets or sets the camera's pitch.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Rotation">
            <summary>
            Gets or sets the camera's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.SmoothPitch">
            <summary>
            Gets or sets the value used to update the camera's pitch during the animation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.SmoothRotation">
            <summary>
            Gets or sets the value used to update the camera's rotation during the animation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.MinimumRotation">
            <summary>
            Gets or sets the minimum rotation that can be reached by the camera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.MaximumRotation">
            <summary>
            Gets or sets the maximum rotation that can be reached by the camera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.MinimumPitch">
            <summary>
            Gets or sets the minimum pitch that can be reached by the camera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.MaximumPitch">
            <summary>
            Gets or sets the maximum pitch that can be reached by the camera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.AnimationStepSpeed">
            <summary>
            Gets or sets the animation step speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.AnimationSpeed">
            <summary>
            Gets or sets the animation speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.IsBeingUsed">
            <summary>
            Gets or sets a value indicating whether this camera is being used by SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.Collections.Generic.IEnumerable{Camera079})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the <see cref="T:Exiled.API.Features.Camera"/> instances given a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Camera079"/>.
            </summary>
            <param name="cameras">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Camera079"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(Camera079)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Camera"/> belonging to the <see cref="T:Camera079"/>, if any.
            </summary>
            <param name="camera079">The base <see cref="T:Camera079"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Camera"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified id.
            </summary>
            <param name="cameraId">The camera id to be searched for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Camera"/> with the given id or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified name.
            </summary>
            <param name="cameraName">The name of the camera.</param>
            <returns>The <see cref="T:Exiled.API.Features.Camera"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(Exiled.API.Enums.CameraType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <see cref="T:Exiled.API.Enums.CameraType"/>.
            </summary>
            <param name="cameraType">The <see cref="T:Exiled.API.Enums.CameraType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Camera"/> with the given <see cref="T:Exiled.API.Enums.CameraType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.Func{Exiled.API.Features.Camera,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="T:Exiled.API.Features.Cassie">
            <summary>
            A set of tools to use in-game C.A.S.S.I.E.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.Announcer">
            <summary>
            Gets the <see cref="T:NineTailedFoxAnnouncer"/> singleton.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.IsSpeaking">
            <summary>
            Gets a value indicating whether or not C.A.S.S.I.E is currently announcing. Does not include decontamination messages.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.VoiceLines">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:NineTailedFoxAnnouncer.VoiceLine"/> objects that C.A.S.S.I.E recognizes.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
            <param name="isSubtitles">Indicates whether C.A.S.S.I.E has to make subtitles.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message with a possibility to custom the subtitles.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="translation">The translation should be show in the subtitles.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
            <param name="isSubtitles">Indicates whether C.A.S.S.I.E has to make subtitles.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.GlitchyMessage(System.String,System.Single,System.Single)">
            <summary>
            Reproduce a glitchy C.A.S.S.I.E announcement.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="glitchChance">The chance of placing a glitch between each word.</param>
            <param name="jamChance">The chance of jamming each word.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedMessage(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message after a certain amount of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass before reproducing the message.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
            <param name="isSubtitles">Indicates whether C.A.S.S.I.E has to make subtitles.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedGlitchyMessage(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Reproduce a glitchy C.A.S.S.I.E announcement after a certain period of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass before reproducing the message.</param>
            <param name="glitchChance">The chance of placing a glitch between each word.</param>
            <param name="jamChance">The chance of jamming each word.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.CalculateDuration(System.String,System.Boolean)">
            <summary>
            Calculates duration of a C.A.S.S.I.E message.
            </summary>
            <param name="message">The message, which duration will be calculated.</param>
            <param name="rawNumber">Determines if a number won't be converted to its full pronunciation.</param>
            <returns>Duration (in seconds) of specified message.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.ConvertTeam(Team,System.String)">
            <summary>
            Converts a Team into a Cassie-Readable <c>CONTAINMENTUNIT</c>.
            </summary>
            <param name="team"><see cref="T:Team"/>.</param>
            <param name="unitName">Unit Name.</param>
            <returns><see cref="T:System.String"/> Containment Unit text.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.ConvertNumber(System.Int32)">
            <summary>
            Converts Number into Cassie-Readable String.
            </summary>
            <param name="num">Number to convert.</param>
            <returns>A CASSIE-readable <see cref="T:System.String"/> representing the number.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.ScpTermination(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Announce a SCP Termination.
            </summary>
            <param name="scp">SCP to announce termination of.</param>
            <param name="info">HitInformation.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.CustomScpTermination(System.String,Exiled.API.Features.DamageHandlers.DamageHandlerBase)">
            <summary>
            Announces the termination of a custom SCP name.
            </summary>
            <param name="scpName">SCP Name. Note that for larger numbers, C.A.S.S.I.E will pronounce the place (eg. "457" -> "four hundred fifty seven"). Spaces can be used to prevent this behavior.</param>
            <param name="info">Hit Information.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.Clear">
            <summary>
            Clears the C.A.S.S.I.E queue.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Cassie.IsValid(System.String)">
            <summary>
            Gets a value indicating whether or not the given word is a valid C.A.S.S.I.E word.
            </summary>
            <param name="word">The word to check.</param>
            <returns><see langword="true"/> if the word is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Components.CollisionHandler">
            <summary>
            Collision Handler for grenades.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Components.CollisionHandler.Owner">
            <summary>
            Gets the thrower of the grenade.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Components.CollisionHandler.Grenade">
            <summary>
            Gets the grenade itself.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Components.CollisionHandler.Init(UnityEngine.GameObject,InventorySystem.Items.ThrowableProjectiles.ThrownProjectile)">
            <summary>
            Inits the <see cref="T:Exiled.API.Features.Components.CollisionHandler"/> object.
            </summary>
            <param name="owner">The grenade owner.</param>
            <param name="grenade">The grenade component.</param>
        </member>
        <member name="T:Exiled.API.Features.CustomHealthStat">
            <summary>
            A custom version of <see cref="T:PlayerStatsSystem.HealthStat"/> which allows the player's max amount of health to be changed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.CustomHealthStat.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.CustomHealthStat.CustomMaxValue">
            <summary>
            Gets or sets the maximum amount of health the player will have.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.AttackerDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.AttackerDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.AttackerDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.ForceFullFriendlyFire">
            <summary>
            Gets or sets a value indicating whether the friendly fire should be forced.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.IsSuicide">
            <summary>
            Gets or sets a value indicating whether the action is due to suicide.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.AllowSelfDamage">
            <summary>
            Gets a value indicating whether the self damage is allowed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.IsFriendlyFire">
            <summary>
            Gets or sets a value indicating whether the damage is friendly fire.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.ProcessDamage(Exiled.API.Features.Player)">
            <summary>
            Computes and processes the damage.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to damage.</param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler">The base <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
            <param name="damage">The amount of damage to be set.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
            <param name="damage">The amount of damage to be set.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to be set.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
            <param name="damage">The amount of damage to be set.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to be set.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> to be set.</param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.CustomDamageHandler.CustomBase">
            <summary>
            Gets the base <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.ApplyDamage(Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.Target">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Player"/> target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.Attacker">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Player"/> attacker. CAN BE NULL!.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.TargetFootprint">
            <summary>
            Gets or sets the target's <see cref="T:Footprinting.Footprint"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.AttackerFootprint">
            <summary>
            Gets or sets the attacker's <see cref="T:Footprinting.Footprint"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.Damage">
            <summary>
            Gets or sets the amount of damage to be dealt.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.StartVelocity">
            <summary>
            Gets or sets the start velocity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.DealtHealthDamage">
            <summary>
            Gets or sets the direct damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.AbsorbedAhpDamage">
            <summary>
            Gets or sets the damage absorbed by AHP processes.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.ApplyDamage(Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.#ctor(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> class.
            </summary>
            <param name="baseHandler">The base <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action">
            <summary>
            All available <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> actions.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action.Damage">
            <summary>
            The result is determined by a damage action.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action.Death">
            <summary>
            The result is determined by a death action.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base">
            <summary>
            Gets or sets the base <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieDeathAnnouncement">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> belonging to this <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.ServerLogsText">
            <summary>
            Gets the text to show in the server logs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Type">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.DamageType"/> for the damage handler.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.DeathTranslation">
            <summary>
            Gets the <see cref="T:PlayerStatsSystem.DeathTranslation"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.op_Implicit(Exiled.API.Features.DamageHandlers.DamageHandlerBase)~PlayerStatsSystem.DamageHandlerBase">
            <summary>
            Implicitly converts the given <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> instance to a <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> object.
            </summary>
            <param name="damageHandlerBase">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.ApplyDamage(Exiled.API.Features.Player)">
            <summary>
            Applies the damage to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to damage.</param>
            <returns>The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action"/> of the call to this method.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.ProcessDamage(Exiled.API.Features.Player)">
            <summary>
            Computes and processes the damage.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to damage.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.As``1">
            <summary>
            Unsafely casts the damage handler to the specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.</typeparam>
            <returns>A <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.BaseAs``1">
            <summary>
            Unsafely casts the damage handler to the specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.</typeparam>
            <returns>A <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Is``1(``0@)">
            <summary>
            Safely casts the damage handler to the specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.</typeparam>
            <param name="param">The casted <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
            <returns>A <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.BaseIs``1(``0@)">
            <summary>
            Safely casts the damage handler to the specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.</typeparam>
            <param name="param">The casted <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> class.
            </summary>
            <param name="announcement">The announcement to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.#ctor(System.String,System.Collections.Generic.IEnumerable{Subtitles.SubtitlePart})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> class.
            </summary>
            <param name="announcement">The announcement to be set.</param>
            <param name="subtitleParts">The subtitles to be set.</param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.Default">
            <summary>
            Gets the default announcement.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.Announcement">
            <summary>
            Gets or sets the announcement.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.SubtitleParts">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Subtitles.SubtitlePart"/> which determines the result of the subtitle belonging to this <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.op_Implicit(Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)~PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement">
            <summary>
            Implicitly converts the given <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance to a <see cref="T:PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement"/> object.
            </summary>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.op_Implicit(PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement)~Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement">
            <summary>
            Implicitly converts the given <see cref="T:PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement"/> instance to a <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> object.
            </summary>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance.</param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.FirearmDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.#ctor(Exiled.API.Features.Items.Item,Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.FirearmDamageHandler"/> class.
            </summary>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to be set.</param>
            <param name="target">The target to be set.</param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Item">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Items.Item"/> used by the damage handler.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Hitbox">
            <summary>
            Gets or sets the <see cref="T:HitboxType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Penetration">
            <summary>
            Gets the penetration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.UseHumanHitboxes">
            <summary>
            Gets a value indicating whether the human hitboxes should be used.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.ProcessDamage(Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.ScpDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.ScpDamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.ScpDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.ScpDamageHandler.Type">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Door">
            <summary>
            A wrapper class for <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Door.DoorVariantToDoor">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>s and their corresponding <see cref="T:Exiled.API.Features.Door"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Door.#ctor(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Door"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> for this door.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.#ctor(Interactables.Interobjects.DoorUtils.DoorVariant,Exiled.API.Features.Room)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Door"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> for this door.</param>
            <param name="room">The <see cref="P:Exiled.API.Features.Door.Room"/> for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Door.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains all the <see cref="T:Exiled.API.Features.Door"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Base">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains all the <see cref="T:Exiled.API.Features.Door"/> instances.
            </summary>
            <summary>
            Gets the base-game <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> for this door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Type">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.DoorType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Room">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Door.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.IsOpen">
            <summary>
            Gets or sets a value indicating whether the door is open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Position">
            <summary>
            Gets or sets the door's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.AllowsScp106">
            <summary>
            Gets or sets a value indicating whether SCP-106 can walk through the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.IsLocked">
            <summary>
            Gets a value indicating whether the door is locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.DoorLockType">
            <summary>
            Gets or the door lock type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.IsBreakable">
            <summary>
            Gets a value indicating whether or not this door is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.IsBroken">
            <summary>
            Gets a value indicating whether or not this door is broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.InstanceId">
            <summary>
            Gets the door's Instance ID.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Nametag">
            <summary>
            Gets a nametag of a door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.RequiredPermissions">
            <summary>
            Gets or sets the required permissions to open the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.MaxHealth">
            <summary>
            Gets or sets the max health of the door. No effect if the door cannot be broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Health">
            <summary>
            Gets or sets the door's remaining health. No effect if the door cannot be broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.IgnoredDamageTypes">
            <summary>
            Gets or sets the damage types this door ignores, if it is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Rotation">
            <summary>
            Gets or sets the door's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Scale">
            <summary>
            Gets or sets the size scale of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Door.Zone">
            <summary>
            Gets the door's <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Door.Get(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Gets the door object associated with a specific <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>, or creates a new one if there isn't one.
            </summary>
            <param name="doorVariant">The base-game <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Door"/> wrapper object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Door"/> given the specified name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Door"/> with the given name or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.Get(System.Func{Exiled.API.Features.Door,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.Get(Exiled.API.Enums.DoorType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Door"/> given the specified <see cref="T:Exiled.API.Enums.DoorType"/>.
            </summary>
            <param name="doorType">The <see cref="T:Exiled.API.Enums.DoorType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Door"/> with the given <see cref="T:Exiled.API.Enums.DoorType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.Random(Exiled.API.Enums.ZoneType,System.Boolean)">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Door"/>.
            </summary>
            <param name="type">Filters by <see cref="T:Exiled.API.Enums.ZoneType"/>.</param>
            <param name="onlyUnbroken">A value indicating whether it filters broken doors.</param>
            <returns><see cref="T:Exiled.API.Features.Door"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.LockAll(System.Single,Exiled.API.Enums.ZoneType,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all <see cref="T:Exiled.API.Features.Door">doors</see> given the specified <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="duration">The duration of the lockdown.</param>
            <param name="zoneType">The <see cref="T:Exiled.API.Enums.ZoneType"/> to affect.</param>
            <param name="lockType">The specified <see cref="P:Exiled.API.Features.Door.DoorLockType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.LockAll(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType},Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all <see cref="T:Exiled.API.Features.Door">doors</see> given the specified <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="duration">The duration of the lockdown.</param>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
            <param name="lockType">The specified <see cref="P:Exiled.API.Features.Door.DoorLockType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.LockAll(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all <see cref="T:Exiled.API.Features.Door">doors</see> in the facility.
            </summary>
            <param name="duration">The duration of the lockdown.</param>
            <param name="lockType">The specified <see cref="P:Exiled.API.Features.Door.DoorLockType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.UnlockAll">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Door">doors</see> in the facility.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Door.UnlockAll(Exiled.API.Enums.ZoneType)">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Door">doors</see> in the facility.
            </summary>
            <param name="zoneType">The <see cref="T:Exiled.API.Enums.ZoneType"/> to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.UnlockAll(System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Door">doors</see> in the facility.
            </summary>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.UnlockAll(System.Func{Exiled.API.Features.Door,System.Boolean})">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Door">doors</see> in the facility.
            </summary>
            <param name="predicate">The condition to satify.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.BreakDoor">
            <summary>
            Breaks the specified door. No effect if the door cannot be broken, or if it is already broken.
            </summary>
            <returns><see langword="true"/> if the door was broken, <see langword="false"/> if it was unable to be broken, or was already broken before.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.DamageDoor(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Damages the door. No effect if the door cannot be broken.
            </summary>
            <param name="amount">The amount of damage to deal.</param>
            <param name="type">The damage type to use.</param>
            <returns><see langword="true"/> if the door was damaged.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.TryPryOpen">
            <summary>
            Tries to pry the door open. No effect if the door cannot be pried.
            </summary>
            <returns><see langword="true"/> if the door was able to be pried open.</returns>
        </member>
        <member name="M:Exiled.API.Features.Door.PlaySound(Exiled.API.Enums.DoorBeepType)">
            <summary>
            Makes the door play a beep sound.
            </summary>
            <param name="beep">The beep sound to play.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.ChangeLock(Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks the door with the given lock type.
            </summary>
            <param name="lockType">The <see cref="T:Exiled.API.Enums.DoorLockType"/> to use.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.Unlock">
            <summary>
            Unlocks and clears all active locks on the door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Door.Unlock(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Unlocks and clears all active locks on the door after a specified length of time.
            </summary>
            <param name="time">The amount of time that must pass before unlocking the door.</param>
            <param name="flagsToUnlock">The door.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.Lock(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all active locks on the door, and then reverts back any changes after a specified length of time.
            </summary>
            <param name="time">The amount of time that must pass before unlocking the door.</param>
            <param name="flagsToUnlock">The door.</param>
        </member>
        <member name="M:Exiled.API.Features.Door.Get(Interactables.Interobjects.DoorUtils.DoorVariant,Exiled.API.Features.Room)">
            <summary>
            Gets the door object associated with a specific <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>, or creates a new one if there isn't one.
            </summary>
            <param name="doorVariant">The base-game <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</param>
            <param name="room">The <see cref="P:Exiled.API.Features.Door.Room"/> this door is in.</param>
            <remarks>The 'room' parameter is only used if a new door wrapper needs to be created.</remarks>
            <returns>A <see cref="T:Exiled.API.Features.Door"/> wrapper object.</returns>
        </member>
        <member name="T:Exiled.API.Features.Generator">
            <summary>
            The in-game Scp079Generator.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Generator.GeneratorValues">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Generator"/> on the map.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.#ctor(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Generator"/> class.
            </summary>
            <param name="scp079Generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Generator.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> which contains all the <see cref="T:Exiled.API.Features.Generator"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Base">
            <summary>
            Gets the base <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the generator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Room">
            <summary>
            Gets the generator's <see cref="P:Exiled.API.Features.Generator.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.State">
            <summary>
            Gets or sets the generator' state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.CurrentTime">
            <summary>
            Gets or sets the generator's current time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.DropdownSpeed">
            <summary>
            Gets the generator's dropdown speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsReady">
            <summary>
            Gets a value indicating whether the generator is ready to be activated.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsEngaged">
            <summary>
            Gets or sets a value indicating whether the generator is engaged.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsActivating">
            <summary>
            Gets or sets a value indicating whether the generator is activating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsOpen">
            <summary>
            Gets or sets a value indicating whether the generator is open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsUnlocked">
            <summary>
            Gets or sets a value indicating whether the generator is unlocked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.LeverDelay">
            <summary>
            Gets or sets the generator's lever delay.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.InteractionCooldown">
            <summary>
            Gets or sets current interaction cooldown.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.ActivationTime">
            <summary>
            Gets or sets the generator's activation time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.DeactivationTime">
            <summary>
            Gets or sets the generator's deactivation time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.TogglePanelCooldown">
            <summary>
            Gets or sets the cooldown to wait before toggling the generator's panel.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.UnlockCooldown">
            <summary>
            Gets or sets the interaction cooldown to wait after unlocking the generator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.DeniedUnlockCooldown">
            <summary>
            Gets or sets the interaction cooldown to wait after failing the generator's unlock interaction.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Position">
            <summary>
            Gets the generator position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Transform">
            <summary>
            Gets the generator transform.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Rotation">
            <summary>
            Gets the generator rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.KeycardPermissions">
            <summary>
            Gets or sets the required permissions to interact with the generator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.Get(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Generator"/> belonging to the <see cref="T:MapGeneration.Distributors.Scp079Generator"/>, if any.
            </summary>
            <param name="scp079Generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> instance.</param>
            <returns>A <see cref="T:Exiled.API.Features.Generator"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.Get(Exiled.API.Enums.GeneratorState)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> given the specified <see cref="T:Exiled.API.Enums.GeneratorState"/>.
            </summary>
            <param name="state">The <see cref="T:Exiled.API.Enums.GeneratorState"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Generator"/> with the given <see cref="T:Exiled.API.Enums.GeneratorState"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.DenyUnlock">
            <summary>
            Denies the unlock.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.SetPermissionFlag(Exiled.API.Enums.KeycardPermissions,System.Boolean)">
            <summary>
            Sets the specified <see cref="P:Exiled.API.Features.Generator.KeycardPermissions"/> flag.
            </summary>
            <param name="flag">The flag to set.</param>
            <param name="isEnabled">A value indicating whether the flag is enabled.</param>
        </member>
        <member name="T:Exiled.API.Features.Intercom">
            <summary>
            A set of tools to easily handle the Intercom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.DisplayText">
            <summary>
            Gets or sets the text displayed on the intercom screen.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.State">
            <summary>
            Gets or sets the current state of the intercom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.InUse">
            <summary>
            Gets a value indicating whether or not the intercom is currently being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.Speaker">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> that is using the intercom.<br>Will be <see langword="null"/> if <see cref="P:Exiled.API.Features.Intercom.InUse"/> is <see langword="false"/>.</br>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.SpeechRemainingTime">
            <summary>
            Gets or sets the remaining speech time of the intercom.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Intercom.PlaySound(System.Boolean,System.Int32)">
            <summary>
            Plays the intercom's sound.
            </summary>
            <param name="start">Sets a value indicating whether or not the sound is the intercom's start speaking sound.</param>
            <param name="transmitterId">Sets the transmitterId.</param>
        </member>
        <member name="T:Exiled.API.Features.Items.Ammo">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Ammo.AmmoLimit">
            <summary>
            Gets the absolute maximum amount of ammo that may be held at one time, if ammo is forcefully given to the player (regardless of worn armor or server configuration).
            <para>
            For accessing the maximum amount of ammo that may be held based on worn armor and server settings, see <see cref="M:Exiled.API.Features.Player.GetAmmoLimit(Exiled.API.Enums.AmmoType)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Ammo.#ctor(InventorySystem.Items.Firearms.Ammo.AmmoItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Ammo"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Ammo.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Ammo"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the ammo.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Ammo.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Items.Armor">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Armor.BodyArmor"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Armor.#ctor(InventorySystem.Items.Armor.BodyArmor)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Armor"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Armor.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Armor"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the armor.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Equippable">
            <summary>
            Gets a value indicating whether this item is equippable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Holsterable">
            <summary>
            Gets a value indicating whether this item is holsterable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.IsWorn">
            <summary>
            Gets a value indicating whether or not this is a worn item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Weight">
            <summary>
            Gets or sets the Weight of the armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.RemoveExcessOnDrop">
            <summary>
            Gets or sets a value indicating whether or not excess ammo should be removed when the armor is dropped.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.HelmetEfficacy">
            <summary>
            Gets or sets how strong the helmet on the armor is.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set the value below 0 or above 100.</exception>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.VestEfficacy">
            <summary>
            Gets or sets how strong the vest on the armor is.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set the value below 0 or above 100.</exception>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.StaminaUseMultiplier">
            <summary>
            Gets or sets how much faster stamina will drain when wearing this armor.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When attempting to set the value below 1 or above 2.</exception>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.MovementSpeedMultiplier">
            <summary>
            Gets or sets how much the users movement speed should be affected when wearing this armor. (higher values = slower movement).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When attempting to set the value below 0 or above 1.</exception>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.CivilianDownsideMultiplier">
            <summary>
            Gets or sets how much worse <see cref="F:RoleType.ClassD"/> and <see cref="F:RoleType.Scientist"/>s are affected by wearing this armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.AmmoLimits">
            <summary>
            Gets or sets the ammo limit of the wearer when using this armor.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Items.ExplosiveGrenade">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.#ctor(ItemType,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the grenade.</param>
            <param name="player">The owner of the grenade. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this grenade is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.MaxRadius">
            <summary>
            Gets or sets the maximum radius of the grenade.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.ScpMultiplier">
            <summary>
            Gets or sets the multiplier for damage against <see cref="F:Exiled.API.Enums.Side.Scp"/> players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.BurnDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Burned"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.DeafenDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Deafened"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.ConcussDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Concussed"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.GrenadeToItem">
            <summary>
            Gets or sets all the currently known <see cref="T:InventorySystem.Items.ThrowableProjectiles.EffectGrenade"/>:<see cref="T:Exiled.API.Features.Items.Throwable"/> items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.SpawnActive(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns an active grenade on the map at the specified location.
            </summary>
            <param name="position">The location to spawn the grenade.</param>
            <param name="owner">Optional: The <see cref="T:Exiled.API.Features.Player"/> owner of the grenade.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.ToString">
            <summary>
            Returns the ExplosiveGrenade in a human readable format.
            </summary>
            <returns>A string containing ExplosiveGrenade-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Firearm">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Firearms.Firearm"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Firearm.FirearmInstances">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Items.Firearm"/> which contains all the existing firearms based on all the <see cref="T:ItemType"/>s.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Firearm.FirearmPairs">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> which contains all pairs for <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Enums.BaseCode"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.#ctor(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Firearm"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Firearm"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the firearm.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AvailableAttachments">
            <inheritdoc cref="P:Exiled.API.Features.Items.Firearm.AvailableAttachmentsValue"/>.
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.PlayerPreferences">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> which represents all the preferences for each <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Firearm"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Ammo">
            <summary>
            Gets or sets the amount of ammo in the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.MaxAmmo">
            <summary>
            Gets the max ammo for this firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AmmoType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.AmmoType"/> of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Aiming">
            <summary>
            Gets a value indicating whether the firearm is being aimed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.FlashlightEnabled">
            <summary>
            Gets a value indicating whether the firearm's flashlight module is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Attachments">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>s of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AttachmentIdentifiers">
            <summary>
            Gets the <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>s of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.BaseCode">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.BaseCode"/> of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.FireRate">
            <summary>
            Gets or sets the fire rate of the firearm, if it is an automatic weapon.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set this value for a weapon that is semi-automatic.</exception>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Recoil">
            <summary>
            Gets or sets the recoil settings of the firearm, if it's an automatic weapon.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set this value for a weapon that is semi-automatic.</exception>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AvailableAttachmentsValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] which contains all available attachments for all firearms.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Adds a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to the firearm.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentName)">
            <summary>
            Adds a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to the firearm.
            </summary>
            <param name="attachmentName">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to the firearm.
            </summary>
            <param name="identifiers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(System.Collections.Generic.IEnumerable{InventorySystem.Items.Firearms.Attachments.AttachmentName})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to the firearm.
            </summary>
            <param name="attachmentNames">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Removes a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> from the firearm.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentName)">
            <summary>
            Removes a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> from the firearm.
            </summary>
            <param name="attachmentName">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentSlot)">
            <summary>
            Removes a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> from the firearm.
            </summary>
            <param name="attachmentSlot">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Removes a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> from the firearm.
            </summary>
            <param name="identifiers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(System.Collections.Generic.IEnumerable{InventorySystem.Items.Firearms.Attachments.AttachmentName})">
            <summary>
            Removes a list of <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> from the firearm.
            </summary>
            <param name="attachmentNames">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(System.Collections.Generic.IEnumerable{InventorySystem.Items.Firearms.Attachments.AttachmentSlot})">
            <summary>
            Removes a list of <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> from the firearm.
            </summary>
            <param name="attachmentSlots">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearAttachments">
            <summary>
            Removes all attachments from the firearm.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.GetAttachment(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Gets a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to check.</param>
            <returns>The corresponding <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.TryGetAttachment(Exiled.API.Structs.AttachmentIdentifier,InventorySystem.Items.Firearms.Attachments.Components.Attachment@)">
            <summary>
            Tries to get a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to check.</param>
            <param name="firearmAttachment">The corresponding <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</param>
            <returns>A value indicating whether or not the firearm has the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.TryGetAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentName,InventorySystem.Items.Firearms.Attachments.Components.Attachment@)">
            <summary>
            Tries to get a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/>.
            </summary>
            <param name="attachmentName">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to check.</param>
            <param name="firearmAttachment">The corresponding <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</param>
            <returns>A value indicating whether or not the firearm has the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(Exiled.API.Features.Player,ItemType,Exiled.API.Structs.AttachmentIdentifier[])">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="itemType">The <see cref="T:ItemType"/> to add.</param>
            <param name="attachments">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(Exiled.API.Features.Player,System.Collections.Generic.KeyValuePair{ItemType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(Exiled.API.Features.Player,System.Collections.Generic.Dictionary{ItemType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},ItemType,Exiled.API.Structs.AttachmentIdentifier[])">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="itemType">The <see cref="T:ItemType"/> to add.</param>
            <param name="attachments">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Collections.Generic.KeyValuePair{ItemType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Collections.Generic.Dictionary{ItemType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(Exiled.API.Features.Player,ItemType)">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="itemType">The <see cref="T:ItemType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},ItemType)">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="itemType">The <see cref="T:ItemType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{ItemType})">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="itemTypes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ItemType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Collections.Generic.IEnumerable{ItemType})">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="itemTypes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ItemType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearPreferences(Exiled.API.Features.Player)">
            <summary>
            Clears all the existing preferences from <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be cleared.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearPreferences(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player})">
            <summary>
            Clears all the existing preferences from <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be cleared.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearPreferences">
            <summary>
            Clears all the existing preferences from <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Items.FlashGrenade">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> class, as well as a new flash grenade item.
            </summary>
            <param name="player">The owner of the grenade. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this grenade is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.BlindCurve">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.AnimationCurve"/> for determining how long the <see cref="F:Exiled.API.Enums.EffectType.Blinded"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.SurfaceDistanceIntensifier">
            <summary>
            Gets or sets the multiplier for damage against <see cref="F:Exiled.API.Enums.Side.Scp"/> players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.DeafenCurve">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.AnimationCurve"/> for determining how long the <see cref="F:Exiled.API.Enums.EffectType.Deafened"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.GrenadeToItem">
            <summary>
            Gets or sets all the currently known <see cref="T:InventorySystem.Items.ThrowableProjectiles.EffectGrenade"/>:<see cref="T:Exiled.API.Features.Items.Throwable"/> items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.SpawnActive(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns an active grenade on the map at the specified location.
            </summary>
            <param name="position">The location to spawn the grenade.</param>
            <param name="owner">Optional: The <see cref="T:Exiled.API.Features.Player"/> owner of the grenade.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.ToString">
            <summary>
            Returns the FlashGrenade in a human readable format.
            </summary>
            <returns>A string containing FlashGrenade-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Flashlight">
            <summary>
            A wrapped class for <see cref="T:InventorySystem.Items.Flashlight.FlashlightItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.#ctor(InventorySystem.Items.Flashlight.FlashlightItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Flashlight"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Flashlight.FlashlightItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Flashlight"/> class, as well as a new Flashlight item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Flashlight.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Flashlight.FlashlightItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Flashlight.Active">
            <summary>
            Gets or sets a value indicating whether the flashlight is turned on.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.ToString">
            <summary>
            Returns the Flashlight in a human readable format.
            </summary>
            <returns>A string containing Flashlight-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Item">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ItemBase"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Item.BaseToItem">
            <summary>
            A dictionary of all <see cref="T:InventorySystem.Items.ItemBase"/>'s that have been converted into <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Item.SerialToItem">
            <summary>
            A dictionary of all <see cref="P:Exiled.API.Features.Items.Item.Serial"/>s that have been assigned to an item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.#ctor(InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Item"/> class.
            </summary>
            <param name="itemBase">The <see cref="T:InventorySystem.Items.ItemBase"/> to encapsulate.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Item"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the item to create.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Serial">
            <summary>
            Gets or sets the unique serial number for the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Scale">
            <summary>
            Gets or sets the scale for the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ItemBase"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Type">
            <summary>
            Gets the <see cref="T:ItemType"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Category">
            <summary>
            Gets the <see cref="T:ItemCategory"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Weight">
            <summary>
            Gets the Weight of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsAmmo">
            <summary>
            Gets a value indicating whether or not this item is ammunition.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsArmor">
            <summary>
            Gets a value indicating whether or not this item is armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsKeycard">
            <summary>
            Gets a value indicating whether or not this item is a keycard.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsMedical">
            <summary>
            Gets a value indicating whether or not this item is a medical item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsScp">
            <summary>
            Gets a value indicating whether or not this item is an SCP item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsThrowable">
            <summary>
            Gets a value indicating whether or not this item is a throwable item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsUtility">
            <summary>
            Gets a value indicating whether or not this item is a utility item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsWeapon">
            <summary>
            Gets a value indicating whether or not this item is a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Owner">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who owns the item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Get(InventorySystem.Items.ItemBase)">
            <summary>
            Gets an existing <see cref="T:Exiled.API.Features.Items.Item"/> or creates a new instance of one.
            </summary>
            <param name="itemBase">The <see cref="T:InventorySystem.Items.ItemBase"/> to convert into an item.</param>
            <returns>The item wrapper for the given <see cref="T:InventorySystem.Items.ItemBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Create(ItemType,Exiled.API.Features.Player)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Items.Item"/> with the proper inherited subclass.
            <para>
            Based on the <paramref name="type"/>, the returned <see cref="T:Exiled.API.Features.Items.Item"/> can be casted into a subclass to gain more control over the object.
            <br />- Usable items (Adrenaline, Medkit, Painkillers, SCP-207, SCP-268, and SCP-500) should be casted to the <see cref="T:Exiled.API.Features.Items.Usable"/> class.
            <br />- All valid ammo should be casted to the <see cref="T:Exiled.API.Features.Items.Ammo"/> class.
            <br />- All valid firearms (not including the Micro HID) should be casted to the <see cref="T:Exiled.API.Features.Items.Firearm"/> class.
            <br />- All valid keycards should be casted to the <see cref="T:Exiled.API.Features.Items.Keycard"/> class.
            <br />- All valid armor should be casted to the <see cref="T:Exiled.API.Features.Items.Armor"/> class.
            <br />- Explosive grenades and SCP-018 should be casted to the <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> class.
            <br />- Flash grenades should be casted to the <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> class.
            <br />- SCP-2176 can be casted to the <see cref="T:Exiled.API.Features.Items.Throwable"/> class.
            </para>
            <para>
            <br />The following have their own respective classes:
            <br />- Flashlights can be casted to <see cref="T:Exiled.API.Features.Items.Flashlight"/>.
            <br />- Radios can be casted to <see cref="T:Exiled.API.Features.Items.Radio"/>.
            <br />- The Micro HID can be casted to <see cref="T:Exiled.API.Features.Items.MicroHid"/>.
            <br />- SCP-244 A and B variants can be casted to <see cref="T:Exiled.API.Features.Items.Scp244"/>.
            <br />- SCP-330 can be casted to <see cref="T:Exiled.API.Features.Items.Scp330"/>.
            </para>
            <para>
            Items that are not listed above do not have a subclass, and can only use the base <see cref="T:Exiled.API.Features.Items.Item"/> class.
            </para>
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the item to create.</param>
            <param name="owner">The <see cref="T:Exiled.API.Features.Player"/> who owns the item by default.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> created. This can be cast as a subclass.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Give(Exiled.API.Features.Player)">
            <summary>
            Gives this item to a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to give the item to.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Spawns the item on the map.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <param name="rotation">The rotation of the item.</param>
            <param name="identifiers">The attachments to be added.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Pickup"/> created by spawning this item.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawns the item on the map.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <param name="rotation">The rotation of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Pickup"/> created by spawning this item.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Spawn(UnityEngine.Vector3)">
            <summary>
            Spawns the item on the map.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Pickup"/> created by spawning this item.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.ToString">
            <summary>
            Returns the Item in a human readable format.
            </summary>
            <returns>A string containing Item-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Keycard">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.#ctor(InventorySystem.Items.Keycards.KeycardItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Keycard"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Keycard"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the keycard.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Keycard.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Keycard.Permissions">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.KeycardPermissions"/> of the keycard.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.ToString">
            <summary>
            Returns the Keycard in a human readable format.
            </summary>
            <returns>A string containing Keycard-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.MicroHid">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.#ctor(InventorySystem.Items.MicroHID.MicroHIDItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.MicroHid"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.MicroHid"/> class, as well as a new Micro HID item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.MicroHid.Energy">
            <summary>
            Gets or sets the remaining energy in the MicroHID.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.MicroHid.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> base of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.MicroHid.State">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.MicroHID.HidState"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.Fire">
            <summary>
            Starts firing the MicroHID.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.ToString">
            <summary>
            Returns the MicroHid in a human readable format.
            </summary>
            <returns>A string containing MicroHid-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Pickup">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Pickup.BaseToItem">
            <summary>
            A dictionary of all <see cref="T:InventorySystem.Items.ItemBase"/>'s that have been converted into <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Pickup.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Pickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Pickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Pickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the Pickup.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Serial">
            <summary>
            Gets the unique serial number for the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Scale">
            <summary>
            Gets or sets the pickup's scale value.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Weight">
            <summary>
            Gets or sets the weight of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ItemBase"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Type">
            <summary>
            Gets the <see cref="T:ItemType"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Locked">
            <summary>
            Gets or sets a value indicating whether the pickup is locked (can't be picked up).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.PreviousOwner">
            <summary>
            Gets or sets the previous owner of this item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.InUse">
            <summary>
            Gets or sets a value indicating whether the pickup is currently in use.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Position">
            <summary>
            Gets or sets the pickup position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Rotation">
            <summary>
            Gets or sets the pickup rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Pickup.Spawned">
            <summary>
            Gets a value indicating whether this pickup is spawned.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Pickup.Get(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Gets an existing <see cref="T:Exiled.API.Features.Items.Pickup"/> or creates a new instance of one.
            </summary>
            <param name="pickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> to convert into a <see cref="T:Exiled.API.Features.Items.Pickup"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Pickup"/> wrapper for the given <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Pickup.Destroy">
            <summary>
            Destroys the pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Pickup.ToString">
            <summary>
            Returns the Pickup in a human readable format.
            </summary>
            <returns>A string containing Pickup-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Radio">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Radio.RadioItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.#ctor(InventorySystem.Items.Radio.RadioItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Radio"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Radio.RadioItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Radio"/> class, as well as a new Radio item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Radio.RadioItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.BatteryLevel">
            <summary>
            Gets or sets the percentage of the radio's battery.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.Range">
            <summary>
            Gets or sets the current <see cref="T:Exiled.API.Enums.RadioRange"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.RangeSettings">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Structs.RadioRangeSettings"/> for the current <see cref="P:Exiled.API.Features.Items.Radio.Range"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.Disable">
            <summary>
            Turns off the radio.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.ToString">
            <summary>
            Returns the Radio in a human readable format.
            </summary>
            <returns>A string containing Radio-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp244">
            <summary>
            A wrapper class for SCP-244.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.#ctor(InventorySystem.Items.Usables.Scp244.Scp244Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp244"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp244"/> class, as well as a new SCP-244 item.
            </summary>
            <param name="scp244Type">The type of SCP-244, either <see cref="F:ItemType.SCP244a"/> or <see cref="F:ItemType.SCP244b"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.Primed">
            <summary>
            Gets or sets a value indicating whether or not SCP-244 will spawn primed.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.ToString">
            <summary>
            Returns the SCP-244 in a human readable format.
            </summary>
            <returns>A string containing SCP-244 related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp330">
            <summary>
            A wrapper class for SCP-330 bags.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.#ctor(InventorySystem.Items.Usables.Scp330.Scp330Bag)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp330"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp330"/> class, as well as a new SCP-330 bag item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.Candies">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/>s held in this bag.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.ExposedType">
            <summary>
            Gets or sets the exposed type. When set to a candy color, the bag will appear as that candy when dropped with the <see cref="M:Exiled.API.Features.Items.Scp330.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)"/> method. Setting it to <see cref="F:InventorySystem.Items.Usables.Scp330.CandyKindID.None"/> results in it looking like a bag.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.AddCandy(InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Adds a specific candy to the bag.
            </summary>
            <param name="type">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> to add.</param>
            <returns><see langword="true"/> if the candy was successfully added to the bag; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.RemoveCandy(InventorySystem.Items.Usables.Scp330.CandyKindID,System.Boolean)">
            <summary>
            Removes a specific candy from the bag.
            </summary>
            <param name="type">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> to be removed.</param>
            <param name="removeAll">Whether or not to only remove all matching candy. (If <see langword="true"/>, all candies of the given type are removed).</param>
            <returns>The total amount of candies that were dropped from the bag.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.DropCandy(InventorySystem.Items.Usables.Scp330.CandyKindID,System.Boolean,System.Boolean,System.Boolean,InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Drops candies from the bag.
            </summary>
            <param name="type">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> of candies to drop.</param>
            <param name="dropAll">Whether or not to drop all candies matching the given type, or just one.</param>
            <param name="dropIndividual">Whether or not to drop all candies individually, or as a bag, when dropping more than one candy.</param>
            <param name="overrideExposedType">Whether or not to override the exposed type of the candy dropped.</param>
            <param name="exposedType">The <see cref="P:Exiled.API.Features.Items.Scp330.ExposedType"/> to use, if the override is set to true.</param>
            <returns>a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Items.Pickup"/>s generated by this method. *Can be empty!*.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the bag, allowing to override the exposed type.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> location to spawn it.</param>
            <param name="rotation">The <see cref="T:UnityEngine.Quaternion"/> rotation to give the item.</param>
            <param name="overrideExposedType">Whether or not to use the <see cref="P:Exiled.API.Features.Items.Scp330.ExposedType"/> value or the default value.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Pickup"/> spawned.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.ToString">
            <summary>
            Returns the SCP-330 in a human readable format.
            </summary>
            <returns>A string containing SCP-330 related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Throwable">
            <summary>
            A wrapper class for throwable items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Throwable"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.#ctor(ItemType,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Throwable"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the throwable item.</param>
            <param name="player">The owner of the throwable item. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this throwable is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.Throwable.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> base for this item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Throwable.PinPullTime">
            <summary>
            Gets or sets the amount of time it takes to pull the pin.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.Throw(System.Boolean)">
            <summary>
            Throws the item.
            </summary>
            <param name="fullForce">Whether to use full or half force.</param>
            this.ServerThrow(projectileSettings.StartVelocity, projectileSettings.UpwardsFactor, projectileSettings.StartTorque, startVel);
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.ToString">
            <summary>
            Returns the Throwable in a human readable format.
            </summary>
            <returns>A string containing Throwable-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Usable">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Usables.UsableItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.#ctor(InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Usable"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.UsableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Usable"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the usable item.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.UsableItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Equippable">
            <summary>
            Gets a value indicating whether this item is equippable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Holsterable">
            <summary>
            Gets a value indicating whether this item is holsterable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Weight">
            <summary>
            Gets or sets the Weight of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.IsUsing">
            <summary>
            Gets a value indicating whether the item is currently being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.UseTime">
            <summary>
            Gets or sets how long it takes to use the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.MaxCancellableTime">
            <summary>
            Gets or sets how long after using starts a player has to cancel using the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.RemainingCooldown">
            <summary>
            Gets or sets the cooldown between repeated uses of this item.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Lift">
            <summary>
            The in-game lift.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Lift.LiftsValue">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Lift"/>s on the map.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Lift.#ctor(Lift)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Lift"/> class.
            </summary>
            <param name="baseLift">The <see cref="T:Lift"/> to wrap.</param>
        </member>
        <member name="P:Exiled.API.Features.Lift.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> which contains all the <see cref="T:Exiled.API.Features.Lift"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Random">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Lift"/>.
            </summary>
            <returns><see cref="T:Exiled.API.Features.Lift"/> object.</returns>
        </member>
        <member name="P:Exiled.API.Features.Lift.Base">
            <summary>
            Gets the base <see cref="T:Lift"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Name">
            <summary>
            Gets the lift's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the lift.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Position">
            <summary>
            Gets the lift's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Rotation">
            <summary>
            Gets the lift's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Status">
            <summary>
            Gets or sets the lift's <see cref="T:Lift.Status"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Type">
            <summary>
            Gets the lift's <see cref="T:Exiled.API.Enums.ElevatorType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsOperative">
            <summary>
            Gets a value indicating whether the lift is operative.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsMoving">
            <summary>
            Gets a value indicating whether the lift is currently moving.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsLocked">
            <summary>
            Gets or sets a value indicating whether the lift is locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsLockable">
            <summary>
            Gets a value indicating whether the lift is lockable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.MovingSpeed">
            <summary>
            Gets or sets the lift's moving speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.MaxDistance">
            <summary>
            Gets or sets the maximum distance from which an object should be considered inside the lift's range.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.CachedItemPositions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnityEngine.Vector3"/> which contains all the lift's cached items' position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.CachedItemRotations">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnityEngine.Vector3"/> which contains all the lift's cached items' rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.CachedItemTransformss">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnityEngine.Vector3"/> which contains all the lift's cached items' <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Elevators">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.Elevator"/> which contains all the lift's elevators.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(Lift.Status)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> which contains all the <see cref="T:Exiled.API.Features.Lift"/> instances from the specified <see cref="T:Lift.Status"/>.
            </summary>
            <param name="status">The specified <see cref="T:Lift.Status"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(Lift)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> belonging to the <see cref="T:Lift"/>, if any.
            </summary>
            <param name="baseLift">The <see cref="T:Lift"/> instance.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(Exiled.API.Enums.ElevatorType)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> corresponding to the specified <see cref="T:Exiled.API.Enums.ElevatorType"/>, if any.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.ElevatorType"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(System.String)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> corresponding to the specified name, if any.
            </summary>
            <param name="name">The lift's name.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> belonging to the <see cref="T:UnityEngine.GameObject"/>, if any.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(System.Func{Exiled.API.Features.Lift,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.TryMeltPlayer(Exiled.API.Features.Player)">
            <summary>
            Tries to melt a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to melt.</param>
            <returns><see langword="true"/> if the player was melted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.PlayMusic">
            <summary>
            Plays the lift's music.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Lift.TryStart">
            <summary>
            Tries to start the lift.
            </summary>
            <returns><see langword="true"/> if the lift was started successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Log">
            <summary>
            A set of tools to print messages on the server console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Log.Info(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Info"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Info(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Info"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Debug(System.Object,System.Boolean)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="canBeSent">Indicates whether the log can be sent or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Debug(System.String,System.Boolean)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="canBeSent">Indicates whether the log can be sent or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.DebugObject``1(``0,System.Boolean)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <typeparam name="T">The inputted object's type.</typeparam>
            <param name="object">The object to be logged and returned.</param>
            <param name="canBeSent">Indicates whether the log can be sent or not.</param>
            <returns>Returns the <typeparamref name="T"/> object inputted in <paramref name="object"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Log.Warn(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Warn"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Warn(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Warn"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Error(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Error"/> level messages to the game console.
            This should be used to send errors only.
            It's recommended to send any messages in the catch block of a try/catch as errors with the exception string.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Error(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Error"/> level messages to the game console.
            This should be used to send errors only.
            It's recommended to send any messages in the catch block of a try/catch as errors with the exception string.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Send(System.Object,Discord.LogLevel,System.ConsoleColor)">
            <summary>
            Sends a log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="level">The message level of importance.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Send(System.String,Discord.LogLevel,System.ConsoleColor)">
            <summary>
            Sends a log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="level">The message level of importance.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.SendRaw(System.Object,System.ConsoleColor)">
            <summary>
            Sends a raw log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> of the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.SendRaw(System.String,System.ConsoleColor)">
            <summary>
            Sends a raw log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> of the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Assert(System.Boolean,System.Object)">
            <summary>
            Sends an <see cref="M:Exiled.API.Features.Log.Error(System.Object)"/> with the provided message if the condition is false and stops the execution.
            <example> For example:
            <code>
                Player ply = Player.Get(2);
                Log.Assert(ply is not null, "The player with the id 2 is null");
            </code>
            results in it logging an error if the player is null and not continuing.
            </example>
            </summary>
            <param name="condition">The conditional expression to evaluate. If the condition is true it will continue.</param>
            <param name="message">The information message. The error and exception will show this message.</param>
            <exception cref="T:System.Exception">If the condition is false. It throws an exception stopping the execution.</exception>
        </member>
        <member name="T:Exiled.API.Features.Map">
            <summary>
            A set of tools to easily handle the in-game map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.LockersValue">
            <summary>
            A list of <see cref="T:MapGeneration.Distributors.Locker"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.TeleportsValue">
            <summary>
            A list of <see cref="T:PocketDimensionTeleport"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.RagdollsValue">
            <summary>
            A list of <see cref="T:Exiled.API.Features.Ragdoll"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.ToysValue">
            <summary>
            A list of <see cref="T:Exiled.API.Features.Toys.AdminToy"/>s on the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.IsLczDecontaminated">
            <summary>
            Gets a value indicating whether decontamination has begun in the light containment zone.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.PocketDimensionTeleports">
            <summary>
            Gets all <see cref="T:PocketDimensionTeleport"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Lockers">
            <summary>
            Gets all <see cref="T:MapGeneration.Distributors.Locker"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Pickups">
            <summary>
            gets all <see cref="T:Exiled.API.Features.Items.Pickup"/>s on the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Ragdolls">
            <summary>
            Gets all <see cref="T:Exiled.API.Features.Ragdoll"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Toys">
            <summary>
            Gets all <see cref="T:Exiled.API.Features.Toys.AdminToy"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Seed">
            <summary>
            Gets or sets the current seed of the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.AmbientSoundPlayer">
            <summary>
            Gets the <see cref="T:AmbientSoundPlayer"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.FindParentRoom(UnityEngine.GameObject)">
            <summary>
            Tries to find the room that a <see cref="T:UnityEngine.GameObject"/> is inside, first using the <see cref="T:UnityEngine.Transform"/>'s parents, then using a Raycast if no room was found.
            </summary>
            <param name="objectInRoom">The <see cref="T:UnityEngine.GameObject"/> inside the room.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> that the <see cref="T:UnityEngine.GameObject"/> is located inside.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(Exiled.API.Features.Broadcast,System.Boolean)">
            <summary>
            Broadcasts a message to all <see cref="T:Exiled.API.Features.Player">players</see>.
            </summary>
            <param name="broadcast">The <see cref="T:Exiled.API.Features.Broadcast"/> to be broadcasted.</param>
            <param name="shouldClearPrevious">Clears all players' broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Broadcasts a message to all <see cref="T:Exiled.API.Features.Player">players</see>.
            </summary>
            <param name="duration">The duration in seconds.</param>
            <param name="message">The message that will be broadcast (supports Unity Rich Text formatting).</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Clears all players' broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ShowHint(System.String,System.Single)">
            <summary>
            Shows a hint to all <see cref="T:Exiled.API.Features.Player">players</see>.
            </summary>
            <param name="message">The message that will be broadcasted (supports Unity Rich Text formatting).</param>
            <param name="duration">The duration in seconds.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearBroadcasts">
            <summary>
            Clears all <see cref="T:Exiled.API.Features.Player">players</see>' broadcasts.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.StartDecontamination">
            <summary>
            Starts the light containment zone decontamination process.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,Exiled.API.Enums.ZoneType)">
            <summary>
            Turns off all lights in the facility.
            </summary>
            <param name="duration">The duration of the blackout.</param>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})">
            <summary>
            Turns off all lights in the facility.
            </summary>
            <param name="duration">The duration of the blackout.</param>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.GetRandomLocker">
            <summary>
            Gets a random <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
            <returns><see cref="T:MapGeneration.Distributors.Locker"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.GetRandomPickup(ItemType)">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Items.Pickup"/>.
            </summary>
            <param name="type">Filters by <see cref="T:ItemType"/>.</param>
            <returns><see cref="T:Exiled.API.Features.Items.Pickup"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.ChangeUnitColor(System.Int32,System.String)">
            <summary>
            Changes the color of a MTF unit.
            </summary>
            <param name="index">The index of the unit color you want to change.</param>
            <param name="color">The new color of the Unit.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.PlayAmbientSound">
            <summary>
            Plays a random ambient sound.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.PlayAmbientSound(System.Int32)">
            <summary>
            Plays an ambient sound.
            </summary>
            <param name="id">The id of the sound to play.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.PlaceTantrum(UnityEngine.Vector3)">
            <summary>
            Places a Tantrum (SCP-173's ability) in the indicated position.
            </summary>
            <param name="position">The position where you want to spawn the Tantrum.</param>
            <returns>The tantrum's <see cref="T:UnityEngine.GameObject"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.PlaceBlood(UnityEngine.Vector3,Exiled.API.Enums.BloodType,System.Single)">
            <summary>
            Places a blood decal.
            </summary>
            <param name="position">The position of the blood decal.</param>
            <param name="type">The <see cref="T:Exiled.API.Enums.BloodType"/> to place.</param>
            <param name="multiplier">A value which determines the spread of the blood decal.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.GetNearCameras(UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all the near cameras.
            </summary>
            <param name="position">The position from which starting to search cameras.</param>
            <param name="toleration">The maximum toleration to define the radius from which get the cameras.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the found cameras.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearCache">
            <summary>
            Clears the lazy loading game object cache.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Paths">
            <summary>
            A set of useful paths.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.AppData">
            <summary>
            Gets AppData path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.ManagedAssemblies">
            <summary>
            Gets managed assemblies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Exiled">
            <summary>
            Gets or sets exiled directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Plugins">
            <summary>
            Gets or sets plugins path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Dependencies">
            <summary>
            Gets or sets Dependencies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Configs">
            <summary>
            Gets or sets the configuration folder path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.IndividualConfigs">
            <summary>
            Gets or sets individual configs directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.LoaderConfig">
            <summary>
            Gets or sets the loader configuration file path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Config">
            <summary>
            Gets or sets the configuration file path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.BackupConfig">
            <summary>
            Gets or sets the backup configs path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Translations">
            <summary>
            Gets or sets translations path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.IndividualTranslations">
            <summary>
            Gets or sets individual translations directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.BackupTranslations">
            <summary>
            Gets or sets backup translations path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Log">
            <summary>
            Gets or sets logs path.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Paths.Reload(System.String)">
            <summary>
            Reloads all paths.
            </summary>
            <param name="rootDirectoryName">The new root directory name.</param>
        </member>
        <member name="M:Exiled.API.Features.Paths.GetConfigPath(System.String)">
            <summary>
            Gets the config path of a plugin.
            </summary>
            <param name="pluginPrefix">The prefix of the plugin.</param>
            <returns>The config path of the plugin.</returns>
        </member>
        <member name="M:Exiled.API.Features.Paths.GetTranslationPath(System.String)">
            <summary>
            Gets the translation path of a plugin.
            </summary>
            <param name="pluginPrefix">The prefix of the plugin.</param>
            <returns>The translation path of the plugin.</returns>
        </member>
        <member name="T:Exiled.API.Features.Player">
            <summary>
            Represents the in-game player, by encapsulating a <see cref="T:ReferenceHub"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Player.ItemsValue">
            <summary>
            A list of the player's items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> of the player to be encapsulated.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> of the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Dictionary">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all <see cref="T:Exiled.API.Features.Player"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.List">
            <summary>
            Gets a list of all <see cref="T:Exiled.API.Features.Player"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserIdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their user ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ReferenceHub">
            <summary>
            Gets the encapsulated <see cref="T:ReferenceHub"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Ammo">
            <summary>
            Gets the player's ammo.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GameObject">
            <summary>
            Gets the encapsulated <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HasHint">
            <summary>
            Gets a value indicating whether the player is viewing a hint.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Radio">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s <see cref="T:Radio"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HintDisplay">
            <summary>
            Gets the <see cref="T:Hints.HintDisplay"/> of the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Inventory">
            <summary>
            Gets the player's <see cref="T:InventorySystem.Inventory"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CameraTransform">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s <see cref="T:UnityEngine.Transform">PlayerCameraReference</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.DissonanceUserSetup">
            <summary>
            Gets the player's <see cref="T:Assets._Scripts.Dissonance.DissonanceUserSetup"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Id">
            <summary>
            Gets or sets the player's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomUserId">
            <summary>
            Gets or sets the player's custom user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RawUserId">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationToken">
            <summary>
            Gets the player's authentication token.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationType">
            <summary>
            Gets the player's authentication type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsVerified">
            <summary>
            Gets a value indicating whether the player is verified.
            </summary>
            <remarks>
            This is always <see langword="false"/> if <c>online_mode</c> is set to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.DisplayNickname">
            <summary>
            Gets or sets the player's display nickname.
            May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Nickname">
            <summary>
            Gets the player's nickname.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.InfoArea">
            <summary>
            Gets or sets the player's player info area bitmask.
            This property can be used to hide player name elements, such as the player's name, badges, etc.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomInfo">
            <summary>
            Gets or sets the player's custom player info string. This string is displayed along with the player's <see cref="P:Exiled.API.Features.Player.InfoArea"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.SessionVariables">
            <summary>
            Gets the dictionary of the player's session variables.
            <para>
            Session variables can be used to save temporary data on players. Data is stored in a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            The key of the data is always a <see cref="T:System.String"/>, whereas the value can be any <see cref="T:System.Object"/>.
            The data stored in a player's session variables can be accessed by different assemblies; it is recommended to uniquely identify stored data so that it does not conflict with other plugins that may also be using the same name.
            Data saved with session variables is not being saved on player disconnect. If the data must be saved after the player's disconnects, a database must be used instead.
            </para>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInvisible">
            <summary>
            Gets or sets a value indicating whether the player is invisible.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.DoNotTrack">
            <summary>
            Gets a value indicating whether or not the player has Do Not Track (DNT) enabled. If this value is <see langword="true"/>, data about the player unrelated to server security shouldn't be stored.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsConnected">
            <summary>
            Gets a value indicating whether the player is fully connected to the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.TargetGhostsHashSet">
            <summary>
            Gets a list of player ids who can't see the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RemoteAdminAccess">
            <summary>
            Gets a value indicating whether the player has Remote Admin access.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsOverwatchEnabled">
            <summary>
            Gets or sets a value indicating whether the player's overwatch is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Cuffer">
            <summary>
            Gets or sets a value indicating the <see cref="T:Exiled.API.Features.Player"/> that currently has the player cuffed.
            <para>
            This value will be <see langword="null"/> if the player is not cuffed. Setting this value to <see langword="null"/> will uncuff the player if they are cuffed.
            </para>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Position">
            <summary>
            Gets or sets the player's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Rotation">
            <summary>
            Gets or sets the player's rotation.
            </summary>
            <returns>Returns the direction the player is looking at.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.LeadingTeam">
            <summary>
            Gets the player's <see cref="T:Exiled.API.Enums.LeadingTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Role">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Features.Roles.Role"/> that is unique to this player and this class. This allows modification of various aspects related to the role solely.
            <para>
            The type of the Role is different based on the <see cref="T:RoleType"/> of the player, and casting should be used to modify the role.
            <br /><see cref="F:RoleType.Spectator"/> = <see cref="T:Exiled.API.Features.Roles.SpectatorRole"/>.
            <br /><see cref="F:RoleType.Scp049"/> = <see cref="T:Exiled.API.Features.Roles.Scp049Role"/>.
            <br /><see cref="F:RoleType.Scp079"/> = <see cref="T:Exiled.API.Features.Roles.Scp079Role"/>.
            <br />If not listed above, the type of Role will be <see cref="T:Exiled.API.Features.Roles.HumanRole"/>.
            </para>
            <para>
            If the role object is stored, it may become invalid if the player changes roles. Thus, the <see cref="P:Exiled.API.Features.Roles.Role.IsValid"/> property can be checked. If this property is <see langword="false"/>, the role should be discarded and this property should be used again to get the new Role.
            This role is automatically cached until it changes, and it is recommended to use this propertly directly rather than storing the property yourself.
            </para>
            <para>
            Roles and RoleTypes can be compared directly. <c>Player.Role == RoleType.Scp079</c> is valid and will return <see langword="true"/> if the player is SCP-079. To set the player's role, see <see cref="M:Exiled.API.Features.Player.SetRole(RoleType,Exiled.API.Enums.SpawnReason,System.Boolean)"/>.
            </para>
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.SetRole(RoleType,Exiled.API.Enums.SpawnReason,System.Boolean)"/>
        </member>
        <member name="P:Exiled.API.Features.Player.IsCuffed">
            <summary>
            Gets a value indicating whether the player is cuffed.
            </summary>
            <remarks>Players can be cuffed without another player being the cuffer.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsReloading">
            <summary>
            Gets a value indicating whether the player is reloading a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsAimingDownWeapon">
            <summary>
            Gets a value indicating whether the player is aiming with a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HasFlashlightModuleEnabled">
            <summary>
            Gets a value indicating whether the player has enabled weapon's flashlight module.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MoveState">
            <summary>
            Gets or sets the player's current <see cref="T:PlayerMovementState"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsJumping">
            <summary>
            Gets a value indicating whether the player is jumping.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsSprinting">
            <summary>
            Gets a value indicating whether the player is sprinting.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsWalking">
            <summary>
            Gets a value indicating whether the player is walking.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsSneaking">
            <summary>
            Gets a value indicating whether the player is sneaking.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IPAddress">
            <summary>
            Gets the player's IP address.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.NoClipEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> has No-clip enabled.
            </summary>
            <returns><see cref="T:System.Boolean"/> indicating status.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.Sender">
            <summary>
            Gets the player's command sender instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Connection">
            <summary>
            Gets player's <see cref="T:Mirror.NetworkConnection"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.NetworkIdentity">
            <summary>
            Gets the player's <see cref="T:Mirror.NetworkIdentity"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHost">
            <summary>
            Gets a value indicating whether the player is the host.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsAlive">
            <summary>
            Gets a value indicating whether the player is alive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsDead">
            <summary>
            Gets a value indicating whether the player is dead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNTF">
            <summary>
            Gets a value indicating whether the player's <see cref="T:RoleType"/> is any NTF rank.
            Equivalent to checking the player's <see cref="T:Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsCHI">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:RoleType"/> is any Chaos rank.
            Equivalent to checking the player's <see cref="T:Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsScp">
            <summary>
            Gets a value indicating whether the player's <see cref="T:RoleType"/> is any SCP rank.
            Equivalent to checking the player's <see cref="T:Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHuman">
            <summary>
            Gets a value indicating whether the player's <see cref="T:RoleType"/> is any human rank.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsTutorial">
            <summary>
            Gets a value indicating whether the player's <see cref="T:RoleType"/> is equal to <see cref="F:RoleType.Tutorial"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsFriendlyFireEnabled">
            <summary>
            Gets or sets a value indicating whether the player's friendly fire is enabled.
            This property only determines if this player can deal damage to players on the same team;
            This player can be damaged by other players on their own team even if this property is <see langword="false"/>.
            </summary>
            <remarks>This property currently does not function, and is planned to be re-implemented in the future.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.Scale">
            <summary>
            Gets or sets the player's scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsBypassModeEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player's bypass mode is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is muted.
            </summary>
            <remarks>This property will NOT persistently mute and unmute the player. For persistent mutes, see <see cref="M:Exiled.API.Features.Player.Mute(System.Boolean)"/> and <see cref="M:Exiled.API.Features.Player.UnMute(System.Boolean)"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.MuteStatus">
            <summary>
            Gets or sets the player's <see cref="T:Assets._Scripts.Dissonance.VoicechatMuteStatus"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.SpeakingFlags">
            <summary>
            Gets or sets the player's <see cref="T:Assets._Scripts.Dissonance.SpeakingFlags"/>.
            </summary>
            <remarks>Voicechat channels are handled by the client, therefore any changes will be ignored.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsIntercomMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is intercom muted.
            </summary>
            <remarks>This property will NOT persistently mute and unmute the player. For persistent mutes, see <see cref="M:Exiled.API.Features.Player.Mute(System.Boolean)"/> and <see cref="M:Exiled.API.Features.Player.UnMute(System.Boolean)"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsVoiceChatting">
            <summary>
            Gets a value indicating whether or not the player is voice chatting.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsTransmitting">
            <summary>
            Gets a value indicating whether or not the player is transmitting on a Radio.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGodModeEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player has godmode enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UnitName">
            <summary>
            Gets or sets the player's unit name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Health">
            <summary>
            Gets or sets the player's health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxHealth"/>, the MaxHealth will also be changed to match the health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxHealth">
            <summary>
            Gets or sets the player's maximum health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ArtificialHealth">
            <summary>
            Gets or sets the player's artificial health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxArtificialHealth"/>, it will also be changed to match the artificial health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxArtificialHealth">
            <summary>
            Gets or sets the player's maximum artificial health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ActiveArtificialHealthProcesses">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all active Artificial Health processes on the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentScp">
            <summary>
            Gets or sets the player's current SCP.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentItem">
            <summary>
            Gets or sets the item in the player's hand, returns the default value if empty.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Stamina">
            <summary>
            Gets the <see cref="T:Stamina"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsStaffBypassEnabled">
            <summary>
            Gets a value indicating whether the staff bypass is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GroupName">
            <summary>
            Gets or sets the player's group name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentRoom">
            <summary>
            Gets the current room the player is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Zone">
            <summary>
            Gets the current zone the player is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ActiveEffects">
            <summary>
            Gets all currently active <see cref="T:CustomPlayerEffects.PlayerEffect">status effects</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Group">
            <summary>
            Gets or sets the player's group.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankColor">
            <summary>
            Gets or sets the player's rank color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankName">
            <summary>
            Gets or sets the player's rank name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GlobalBadge">
            <summary>
            Gets the global badge of the player, can be <see langword="null"/> if none.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.BadgeHidden">
            <summary>
            Gets or sets a value indicating whether or not the player's badge is hidden.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNorthwoodStaff">
            <summary>
            Gets a value indicating whether or not a player is Northwood staff.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGlobalModerator">
            <summary>
            Gets a value indicating whether or not a player is a global moderator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInPocketDimension">
            <summary>
            Gets a value indicating whether or not the player is in the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsUsingStamina">
            <summary>
            Gets or sets a value indicating whether or not the player should use stamina system.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Ping">
            <summary>
            Gets the player's ping.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Items">
            <summary>
            Gets the player's items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInventoryEmpty">
            <summary>
            Gets a value indicating whether the player inventory is empty or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInventoryFull">
            <summary>
            Gets a value indicating whether the player inventory is full.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CanSendInputs">
            <summary>
            Gets or sets a value indicating whether or not the player can send inputs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentSpectatingPlayers">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> of spectators that are currently spectating this <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Preferences">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> which contains all player's preferences.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Footprint">
            <summary>
            Gets the player's <see cref="T:Footprinting.Footprint"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsSpawnProtected">
            <summary>
            Gets or sets a value indicating whether the player is spawn protected.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UnverifiedPlayers">
            <summary>
            Gets a dictionary for storing player objects of connected but not yet verified players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Exiled.API.Enums.Side)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by side. Can be empty.
            </summary>
            <param name="side">The players' side.</param>
            <returns>The filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Team)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by team. Can be empty.
            </summary>
            <param name="team">The players' team.</param>
            <returns>The filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(RoleType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by role. Can be empty.
            </summary>
            <param name="role">The players' role.</param>
            <returns>The filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.Func{Exiled.API.Features.Player,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(CommandSystem.ICommandSender)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:CommandSystem.ICommandSender"/>, if any.
            </summary>
            <param name="sender">The command sender.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(CommandSender)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:CommandSender"/>, if any.
            </summary>
            <param name="sender">The command sender.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(ReferenceHub)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:ReferenceHub"/>, if any.
            </summary>
            <param name="referenceHub">The player's <see cref="T:ReferenceHub"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.UInt32)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to a specific netId, if any.
            </summary>
            <param name="netId">The player's <see cref="P:Mirror.NetworkIdentity.netId"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Player"/> owning the netId, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Mirror.NetworkIdentity)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to a specific <see cref="T:Mirror.NetworkIdentity"/>, if any.
            </summary>
            <param name="netIdentity">The player's <see cref="T:Mirror.NetworkIdentity"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Player"/> owning the <see cref="T:Mirror.NetworkIdentity"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Mirror.NetworkConnection)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to a specific <see cref="T:Mirror.NetworkConnection"/>, if any.
            </summary>
            <param name="conn">The player's <see cref="T:Mirror.NetworkConnection"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Player"/> owning the <see cref="T:Mirror.NetworkConnection"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:UnityEngine.GameObject"/>, if any.
            </summary>
            <param name="gameObject">The player's <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.Int32)">
            <summary>
            Gets the player belonging to the specified id.
            </summary>
            <param name="id">The player id.</param>
            <returns>Returns the player found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.String)">
            <summary>
            Gets the player by identifier.
            </summary>
            <param name="args">The player's nickname, ID, steamID64 or Discord ID.</param>
            <returns>Returns the player found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ReloadWeapon">
            <summary>
            Forces the player to reload their current weapon.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item is not a firearm.</exception>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetItem(System.UInt16,InventorySystem.Items.ItemBase@)">
            <summary>
            Tries to get an item from a player's inventory.
            </summary>
            <param name="serial">The unique identifier of the item.</param>
            <param name="item">The <see cref="T:InventorySystem.Items.ItemBase"/> found. <see langword="null"/> if it doesn't exist.</param>
            <returns><see langword="true"/> if the item is found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRank(System.String,UserGroup)">
            <summary>
            Sets the player's rank.
            </summary>
            <param name="name">The rank name to be set.</param>
            <param name="group">The group to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Handcuff">
            <summary>
            Handcuff the player as administrator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Handcuff(Exiled.API.Features.Player)">
            <summary>
            Handcuff the player.
            </summary>
            <param name="cuffer">The cuffer player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveHandcuffs">
            <summary>
            Removes handcuffs.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRole(RoleType,Exiled.API.Enums.SpawnReason,System.Boolean)">
            <summary>
            Sets the player's <see cref="T:RoleType"/>.
            </summary>
            <param name="newRole">The new <see cref="T:RoleType"/> to be set.</param>
            <param name="reason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> defining why the player's role was changed.</param>
            <param name="lite">Indicates whether it should preserve the position and inventory after changing the role.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(Exiled.API.Features.Broadcast,System.Boolean)">
            <summary>
            Broadcasts the given <see cref="T:Exiled.API.Features.Broadcast"/> to the player.
            </summary>
            <param name="broadcast">The <see cref="T:Exiled.API.Features.Broadcast"/> to be broadcasted.</param>
            <param name="shouldClearPrevious">Clears all player's broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItem(Exiled.API.Features.Items.Item)">
            <summary>
            Drops an item from the player's inventory.
            </summary>
            <param name="item">The item to be dropped.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropHeldItem">
            <summary>
            Drops the held item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.HasItem(Exiled.API.Features.Items.Item)">
            <summary>
            Indicates whether the player has an item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns><see langword="true"/>, if the player has it; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.HasItem(ItemType)">
            <summary>
            Indicates whether the player has an item type.
            </summary>
            <param name="type">The type to search for.</param>
            <returns><see langword="true"/>, if the player has it; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.CountItem(ItemType)">
            <summary>
            Counts how many items of a certain <see cref="T:ItemType"/> a player has.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>How many items of that <see cref="T:ItemType"/> the player has.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem(Exiled.API.Features.Items.Item,System.Boolean)">
            <summary>
            Removes an <see cref="T:Exiled.API.Features.Items.Item"/> from the player's inventory.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to remove.</param>
            <param name="destroy">Whether or not to destroy the item.</param>
            <returns>A value indicating whether the <see cref="T:Exiled.API.Features.Items.Item"/> was removed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveHeldItem">
            <summary>
            Removes the held <see cref="T:InventorySystem.Items.ItemBase"/> from the player's inventory.
            </summary>
            <returns>Returns a value indicating whether the <see cref="T:InventorySystem.Items.ItemBase"/> was removed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(System.String,System.String)">
            <summary>
            Sends a console message to the player's console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(Exiled.API.Features.Player,System.String,System.String)">
            <summary>
            Sends a console message to a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="target">The message target.</param>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Disconnect(System.String)">
            <summary>
            Disconnects the player.
            </summary>
            <param name="reason">The disconnection reason.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetStamina">
            <summary>
            Resets the player's stamina.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damageHandlerBase">The <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> used to deal damage.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)">
            <summary>
            Hurts the player.
            </summary>
            <param name="attacker">The <see cref="T:Exiled.API.Features.Player"/> attacking player.</param>
            <param name="amount">The <see langword="float"/> amount of damage to deal.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> of the damage dealt.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> cassie announcement to make if the damage kills the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,UnityEngine.Vector3,System.Int32)">
            <summary>
            Hurts the player.
            </summary>
            <param name="attacker">The <see cref="T:Exiled.API.Features.Player"/> attacking player.</param>
            <param name="damage">The <see langword="float"/> amount of damage to deal.</param>
            <param name="force">The throw force.</param>
            <param name="armorPenetration">The armor penetration amount.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,Exiled.API.Enums.DamageType,System.String)">
            <summary>
            Hurts the player.
            </summary>
            <param name="amount">The <see langword="float"/> amount of damage to deal.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> of the damage dealt.</param>
            <param name="cassieAnnouncement">The <see langword="string"/> cassie announcement to make if the damage kills the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,System.String,System.String)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageReason"> The reason for the damage being dealt.</param>
            <param name="cassieAnnouncement">The cassie announcement to make.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Heal(System.Single,System.Boolean)">
            <summary>
            Heals the player.
            </summary>
            <param name="amount">The amount of health to heal.</param>
            <param name="overrideMaxHealth">Whether healing should exceed their max health.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(Exiled.API.Enums.DamageType,System.String)">
            <summary>
            Kills the player.
            </summary>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> the player has been killed.</param>
            <param name="cassieAnnouncement">The cassie announcement to make upon death.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(System.String,System.String)">
            <summary>
            Kills the player.
            </summary>
            <param name="deathReason">The reason the player has been killed.</param>
            <param name="cassieAnnouncement">The cassie announcement to make upon death.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Ban(System.Int32,System.String,System.String)">
            <summary>
            Bans the player.
            </summary>
            <param name="duration">The ban duration.</param>
            <param name="reason">The ban reason.</param>
            <param name="issuer">The ban issuer nickname.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kick(System.String,System.String)">
            <summary>
            Kicks the player.
            </summary>
            <param name="reason">The kick reason.</param>
            <param name="issuer">The kick issuer nickname.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Mute(System.Boolean)">
            <summary>
            Persistently mutes the player. For temporary mutes, see <see cref="P:Exiled.API.Features.Player.IsMuted"/> and <see cref="P:Exiled.API.Features.Player.IsIntercomMuted"/>.
            </summary>
            <param name="intercom">Whether or not this mute is for the intercom only.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.UnMute(System.Boolean)">
            <summary>
            Revokes a persistent mute. For temporary mutes, see <see cref="P:Exiled.API.Features.Player.IsMuted"/> and <see cref="P:Exiled.API.Features.Player.IsIntercomMuted"/>.
            </summary>
            <param name="intercom">Whether or not this un-mute is for the intercom only.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.BlinkTag">
            <summary>
            Blink the player's tag.
            </summary>
            <returns>Used to wait.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoteAdminMessage(System.String,System.Boolean,System.String)">
            <summary>
            Sends a message to the player's Remote Admin console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="success">Indicates whether the message should be highlighted as success.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Shows a broadcast to the player. Doesn't get logged to the console and can be monospaced.
            </summary>
            <param name="duration">The broadcast duration.</param>
            <param name="message">The message to be broadcasted.</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Clears all player's broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearBroadcasts">
            <summary>
            Clears the player's brodcast. Doesn't get logged to the console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.AddAmmo(Exiled.API.Enums.AmmoType,System.UInt16)">
            <summary>
            Adds the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> to the player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be added.</param>
            <param name="amount">The amount of ammo to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddAmmo(ItemType,System.UInt16)">
            <summary>
            Adds the amount of a weapon's <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> to the player's inventory.
            </summary>
            <param name="weaponType">The <see cref="T:ItemType"/> of the weapon.</param>
            <param name="amount">The amount of ammo to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetAmmo(Exiled.API.Enums.AmmoType,System.UInt16)">
            <summary>
            Sets the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> to the player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be set.</param>
            <param name="amount">The amount of ammo to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetAmmo(Exiled.API.Enums.AmmoType)">
            <summary>
            Gets the ammo count of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> in a player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be searched for in the player's inventory.</param>
            <returns>The specified <see cref="T:Exiled.API.Enums.AmmoType">ammo</see> count.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.DropAmmo(Exiled.API.Enums.AmmoType,System.UInt16,System.Boolean)">
            <summary>
            Drops a specific <see cref="T:Exiled.API.Enums.AmmoType"/> out of the player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> that will be dropped.</param>
            <param name="amount">The amount of ammo that will be dropped.</param>
            <param name="checkMinimals">Whether ammo limits will be taken into consideration.</param>
            <returns><see langword="true"/> if ammo was dropped; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetAmmoLimit(Exiled.API.Enums.AmmoType)">
            <summary>
            Gets the maximum amount of ammo the player can hold, given the ammo <see cref="T:Exiled.API.Enums.AmmoType"/>.
            This method factors in the armor the player is wearing, as well as server configuration.
            For the maximum amount of ammo that can be given regardless of worn armor and server configuration, see <see cref="F:Exiled.API.Features.Items.Ammo.AmmoLimit"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.AmmoType"/> of the ammo to check.</param>
            <returns>The maximum amount of ammo this player can carry. Guaranteed to be between <c>0</c> and <see cref="F:Exiled.API.Features.Items.Ammo.AmmoLimit"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetCategoryLimit(ItemCategory)">
            <summary>
            Gets the maximum amount of an <see cref="T:ItemCategory"/> the player can hold, based on the armor the player is wearing, as well as server configuration.
            </summary>
            <param name="category">The <see cref="T:ItemCategory"/> to check.</param>
            <returns>The maximum amount of items in the category that the player can hold.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Add an item of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType,System.Int32)">
            <summary>
            Add the amount of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType,System.Int32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Add the amount of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.IEnumerable{ItemType})">
            <summary>
            Add the list of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="items">The list of items to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.Dictionary{ItemType,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}})">
            <summary>
            Add the list of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Item)">
            <summary>
            Add an item to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Add an item to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Pickup)">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Items.Pickup"/> of the item to be added.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> that was added.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Pickup,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Items.Pickup"/> of the item to be added.</param>
            <param name="identifiers">The attachments to be added to <see cref="T:Exiled.API.Features.Items.Pickup"/> of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> that was added.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(InventorySystem.Items.ItemBase,Exiled.API.Features.Items.Item)">
            <summary>
            Add an item to the player's inventory.
            </summary>
            <param name="itemBase">The item to be added.</param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> object of the item.</param>
            <returns>The item that was added.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Item,System.Int32)">
            <summary>
            Add the amount of items to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Item,System.Int32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Add the amount of items to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})">
            <summary>
            Add the list of items to the player's inventory.
            </summary>
            <param name="items">The list of items to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.Dictionary{Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}})">
            <summary>
            Add the list of items to the player's inventory.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:Exiled.API.Features.Items.Item"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddCandy(InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Gives the player a specific candy. Will give the player a bag if they do not already have one.
            </summary>
            <param name="candyType">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> to give.</param>
            <returns><see langword="true"/> if a candy was given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{ItemType})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearInventory(System.Boolean)">
            <summary>
            Clears the player's inventory, including all ammo and items.
            </summary>
            <param name="destroy">Whether or not to fully destroy the old items.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItems">
            <summary>
            Drops all items in the player's inventory, including all ammo and items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.ThrowGrenade(Exiled.API.Enums.GrenadeType,System.Boolean)">
            <summary>
            Causes the player to throw a grenade.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.GrenadeType"/> to be thrown.</param>
            <param name="fullForce">Whether to throw with full or half force.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Throwable"/> item that was spawned.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ThrowItem(Exiled.API.Features.Items.Throwable,System.Boolean)">
            <summary>
            Throw an item.
            </summary>
            <param name="throwable">The <see cref="T:Exiled.API.Features.Items.Throwable"/> to be thrown.</param>
            <param name="fullForce">Whether to throw with full or half force.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHint(System.String,System.Single)">
            <summary>
            Show a hint to the player.
            </summary>
            <param name="message">The message to be shown.</param>
            <param name="duration">The duration the text will be on screen.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHitMarker(System.Single)">
            <summary>
            Sends a HitMarker to the player.
            </summary>
            <param name="size">The size of the hitmarker (Do not exceed <see cref="F:Hitmarker.MaxSize"/>).</param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetSessionVariable``1(System.String,``0@)">
            <summary>
            Safely gets an <see cref="T:System.Object"/> from <see cref="P:Exiled.API.Features.Player.SessionVariables"/>, then casts it to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The returned object type.</typeparam>
            <param name="key">The key of the object to get.</param>
            <param name="result">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter is used.</param>
            <returns><see langword="true"/> if the SessionVariables contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetModule``1">
            <summary>
            Gets a <see cref="T:PlayerStatsSystem.StatBase"/> module from the player's <see cref="T:PlayerStatsSystem.PlayerStats"/> component.
            </summary>
            <typeparam name="T">The returned object type.</typeparam>
            <returns>The <typeparamref name="T"/> module that was requested.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffectActive``1">
            <summary>
            Gets a <see cref="T:System.Boolean"/> describing whether the given <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> is currently enabled.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to check.</typeparam>
            <returns>A <see cref="T:System.Boolean"/> determining whether the player effect is active.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableAllEffects">
            <summary>
            Disables all currently active <see cref="T:CustomPlayerEffects.PlayerEffect">status effects</see>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffect``1">
            <summary>
            Disables a specific <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to disable.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffect(Exiled.API.Enums.EffectType)">
            <summary>
            Disables a specific <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> to disable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Enums.EffectType})">
            <summary>
            Disables a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="effects">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> to disable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect``1(System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</typeparam>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(CustomPlayerEffects.PlayerEffect,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <param name="effect">The name of the <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(System.String,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <param name="effect">The name of the <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A bool indicating whether the effect was valid and successfully enabled.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Enums.EffectType,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ApplyRandomEffect(System.Single,System.Boolean)">
            <summary>
            Enables a random <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A <see cref="T:Exiled.API.Enums.EffectType"/> that was given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Enums.EffectType},System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="effects">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> to enable.</param>
            <param name="duration">The amount of time the effects will be active for.</param>
            <param name="addDurationIfActive">If an effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffect(Exiled.API.Enums.EffectType)">
            <summary>
            Gets an instance of <see cref="T:CustomPlayerEffects.PlayerEffect"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>The <see cref="T:CustomPlayerEffects.PlayerEffect"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetEffect(Exiled.API.Enums.EffectType,CustomPlayerEffects.PlayerEffect@)">
            <summary>
            Tries to get an instance of <see cref="T:CustomPlayerEffects.PlayerEffect"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <param name="playerEffect">The <see cref="T:CustomPlayerEffects.PlayerEffect"/>.</param>
            <returns>A bool indicating whether the <paramref name="playerEffect"/> was successfully gotten.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffectIntensity``1">
            <summary>
            Gets a <see cref="T:System.Byte"/> indicating the intensity of the given <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see>.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to check.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the given type is not a valid <see cref="T:CustomPlayerEffects.PlayerEffect"/>.</exception>
            <returns>The intensity of the effect.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity``1(System.Byte)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see>.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to change the intensity of.</typeparam>
            <param name="intensity">The intensity of the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity(Exiled.API.Enums.EffectType,System.Byte,System.Single)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.PlayerEffect"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.EffectType"/> to change.</param>
            <param name="intensity">The new intensity to use.</param>
            <param name="duration">The new duration to add to the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity(System.String,System.Byte,System.Single)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see>.
            </summary>
            <param name="effect">The name of the <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</param>
            <param name="intensity">The intensity of the effect.</param>
            <param name="duration">The new length of the effect. Defaults to infinite length.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.OpenReportWindow(System.String)">
            <summary>
            Opens the report window.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.PlaceTantrum">
            <summary>
            Places a Tantrum (SCP-173's ability) under the player.
            </summary>
            <returns>The tantrum's <see cref="P:Exiled.API.Features.Player.GameObject"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddAhp(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Gives a new <see cref="T:PlayerStatsSystem.AhpStat">to the player</see>.
            </summary>
            <param name="amount">The amount to give the player.</param>
            <param name="limit">The maximum AHP for this stat.</param>
            <param name="decay">How much value is lost per second.</param>
            <param name="efficacy">Percent of incoming damage absorbed by this stat.</param>
            <param name="sustain">The number of seconds to delay the start of the decay.</param>
            <param name="persistant">Whether or not the process is removed when the value hits 0.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.MakeNoise(System.Single)">
            <summary>
            Makes noise given a specified distance intensity.
            </summary>
            <param name="distanceIntensity">The distance from which is able to hear the noise.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Reconnect(System.UInt16,System.Single,System.Boolean,RoundRestarting.RoundRestartType)">
            <summary>
            Reconnects player to the server. Can be used to redirect them to another server on a different port but same IP.
            </summary>
            <param name="newPort">New port.</param>
            <param name="delay">Player reconnection delay.</param>
            <param name="reconnect">Whether or not player should be reconnected.</param>
            <param name="roundRestartType">Type of round restart.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.PlayGunSound(ItemType,System.Byte,System.Byte)">
            <inheritdoc cref="M:Exiled.API.Extensions.MirrorExtensions.PlayGunSound(Exiled.API.Features.Player,UnityEngine.Vector3,ItemType,System.Byte,System.Byte)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.PlaceBlood(Exiled.API.Enums.BloodType,System.Single)">
            <inheritdoc cref="M:Exiled.API.Features.Map.PlaceBlood(UnityEngine.Vector3,Exiled.API.Enums.BloodType,System.Single)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.GetNearCameras(System.Single)">
            <inheritdoc cref="M:Exiled.API.Features.Map.GetNearCameras(UnityEngine.Vector3,System.Single)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.Teleport(UnityEngine.Vector3)">
            <summary>
            Teleports the player to the given <see cref="T:UnityEngine.Vector3"/> coordinates.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> coordinates to move the player to.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Teleport(System.Object)">
            <summary>
            Teleports the player to the given object.
            </summary>
            <param name="obj">The object to teleport the player to.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RandomTeleport(System.Type)">
            <summary>
            Teleports player to a random object of a specific type.
            </summary>
            <param name="type">Object for teleport.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RandomTeleport(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Teleports the player to a random object.
            </summary>
            <param name="types">The list of object types to choose from.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ToString">
            <summary>
            Returns the player in a human-readable format.
            </summary>
            <returns>A string containing Player-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Plugin`1">
            <summary>
            Expose how a plugin has to be made.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Plugin`1"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Author">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Version">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.RequiredExiledVersion">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Commands">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.InternalTranslation">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.ConfigPath">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.TranslationPath">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnReloaded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnRegisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnUnregisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.CompareTo(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Plugin`2">
            <summary>
            Expose how a plugin has to be made.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
            <typeparam name="TTranslation">The translation type.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Plugin`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Plugin`2"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Plugin`2.Translation">
            <summary>
            Gets the plugin translations.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Ragdoll">
            <summary>
            A set of tools to handle the ragdolls more easily.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Ragdoll"/> class.
            </summary>
            <param name="player">The ragdoll's <see cref="T:Exiled.API.Features.Player">owner</see>.</param>
            <param name="handler">The player's <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
            <param name="canBeSpawned">A value that represents whether the ragdoll can be spawned.</param>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.#ctor(RagdollInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Ragdoll"/> class.
            </summary>
            <param name="ragdollInfo">The ragdoll's <see cref="T:RagdollInfo"/>.</param>
            <param name="canBeSpawned">A value that represents whether the ragdoll can be spawned.</param>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.#ctor(Ragdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Ragdoll"/> class.
            </summary>
            <param name="ragdoll">The encapsulated <see cref="T:Ragdoll"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.CleanUpTime">
            <summary>
            Gets or sets the <see cref="T:Ragdoll"/>s clean up time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.AllowCleanUp">
            <summary>
            Gets or sets a value indicating whether or not the clean up event can be executed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Base">
            <summary>
            Gets the <see cref="T:Ragdoll"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.NetworkInfo">
            <summary>
            Gets or sets the ragdoll's <see cref="T:RagdollInfo">NetworkInfo</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.DamageHandler">
            <summary>
            Gets the ragdoll's <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.SpecialRigidbodies">
            <summary>
            Gets the ragdoll's <see cref="T:Ragdoll.SpecialRigidbody"/>[].
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.DeathAnimations">
            <summary>
            Gets all ragdoll's <see cref="T:DeathAnimations.DeathAnimation"/>[].
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IsCleanedUp">
            <summary>
            Gets a value indicating whether or not the ragdoll has been already cleaned up.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.CanBeCleanedUp">
            <summary>
            Gets or sets a value indicating whether or not the ragdoll can be cleaned up.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IsPlayingAnimations">
            <summary>
            Gets a value indicating whether or not the ragdoll is currently playing animations.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.AllowAnimations">
            <summary>
            Gets or sets a value indicating whether or not the ragdoll can play animations.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Name">
            <summary>
            Gets the ragdoll's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Owner">
            <summary>
            Gets the owner <see cref="T:Exiled.API.Features.Player"/>. Can be <see langword="null"/> if the ragdoll does not have an owner.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.CreationTime">
            <summary>
            Gets the time that the ragdoll was spawned.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Role">
            <summary>
            Gets the <see cref="T:RoleType"/> of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.AllowRecall">
            <summary>
            Gets a value indicating whether or not the ragdoll is respawnable by SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Room">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> the ragdoll is located in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Position">
            <summary>
            Gets or sets the ragdoll's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Rotation">
            <summary>
            Gets or sets the ragdoll's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Scale">
            <summary>
            Gets or sets the ragdoll's scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.DeathReason">
            <summary>
            Gets the ragdoll's death reason.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IgnoredRagdolls">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Ragdoll"/>'s that will be ignored by clean up event.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Get(Ragdoll)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Ragdoll"/> belonging to the <see cref="T:Ragdoll"/>, if any.
            </summary>
            <param name="ragdoll">The <see cref="T:Ragdoll"/> to get.</param>
            <returns>A <see cref="T:Exiled.API.Features.Ragdoll"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Get(Exiled.API.Features.Player)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/> belonging to the <see cref="T:Exiled.API.Features.Player"/>, if any.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to get.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Get(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player})">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/> belonging to the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/>, if any.
            </summary>
            <param name="players">The <see cref="T:Exiled.API.Features.Player"/>s to get.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Spawn(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Ragdoll"/> on the map.
            </summary>
            <param name="player">The ragdoll's <see cref="T:Exiled.API.Features.Player">owner</see>.</param>
            <param name="handler">The player's <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Spawn(RagdollInfo)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Ragdoll"/> on the map.
            </summary>
            <param name="ragdollInfo">The ragdoll's <see cref="T:RagdollInfo"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Delete">
            <summary>
            Deletes the ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Spawn">
            <summary>
            Spawns the ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.UnSpawn">
            <summary>
            Un-spawns the ragdoll.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Recontainer">
            <summary>
            A wrapper class for <see cref="T:Recontainer079"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.Base">
            <summary>
            Gets the base <see cref="T:Recontainer079"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ContainmentGates">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains all the <see cref="T:Exiled.API.Features.Door"/> instances used for the containment zone.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsCassieBusy">
            <summary>
            Gets a value indicating whether the C.A.S.S.I.E is currently busy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContaimentZoneOpen">
            <summary>
            Gets or sets a value indicating whether the containment zone is open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentZoneLocked">
            <summary>
            Gets or sets a value indicating whether the containment zone is locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.OverchargeDelay">
            <summary>
            Gets or sets the delay to wait before overcharging.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.LockdownDuration">
            <summary>
            Gets or sets the lockdown duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorButton">
            <summary>
            Gets the activator button's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorButtonPosition">
            <summary>
            Gets or sets the <see cref="P:Exiled.API.Features.Recontainer.ActivatorButton"/>'s position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorWindow">
            <summary>
            Gets the activator's window.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorPosition">
            <summary>
            Gets the activator's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorLerpSpeed">
            <summary>
            Gets or sets the activator's lerp speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ProgressAnnouncement">
            <summary>
            Gets or sets the announcement played to warn players about the contaiment sequence's progress.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.CountdownAnnouncement">
            <summary>
            Gets or sets the announcement played when counting down to overcharge.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ContainmentSuccessAnnouncement">
            <summary>
            Gets or sets the announcement played when the contaiment is successful done.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ContainmentFailureAnnouncement">
            <summary>
            Gets or sets the announcement played when the contaiment is failed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.AllGeneratorsActivatedAnnouncement">
            <summary>
            Gets or sets the announcement played when all the generators have been activated.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentSequenceDone">
            <summary>
            Gets or sets a value indicating whether the containment sequence is done.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentSequenceSuccessful">
            <summary>
            Gets or sets a value indicating whether the containment sequence is successful done.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.LockedDoors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains all the <see cref="T:Exiled.API.Features.Door"/> instances locked during the overcharge procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.TryKillScp079">
            <summary>
            Tries to kill SCP-079.
            </summary>
            <returns><see langword="true"/> if SCP-079 was successfully contained; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.PlayAnnouncement(System.String,System.Single)">
            <summary>
            Playes an announcement.
            </summary>
            <param name="announcement">The announcement to play.</param>
            <param name="glitchyMultiplier">The glitchy multiplier.</param>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.BeginOvercharge">
            <summary>
            Begins the overcharge procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.EndOvercharge">
            <summary>
            Ends the overcharge procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.AnnounceEngagementStatus">
            <summary>
            Announces the engagement status.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.AnnounceEngagementStatus(System.Int32)">
            <summary>
            Announces the engagement status.
            </summary>
            <param name="engagedGenerators">The engaged generators count.</param>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.RefreshEngamentStatus">
            <summary>
            Refreshes the engagement status.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.Recontain">
            <summary>
            Begins the recontainment procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.RefreshActivator">
            <summary>
            Refreshes the activator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.BreakGlass">
            <summary>
            Breaks the glass protecting the activator button.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Respawn">
            <summary>
            A set of tools to handle team respawns more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NextKnownTeam">
            <summary>
            Gets the next known <see cref="T:Respawning.SpawnableTeamType"/> that will spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.TimeUntilRespawn">
            <summary>
            Gets the amount of seconds before the next respawn will occur.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.IsSpawning">
            <summary>
            Gets a value indicating whether or not a team is currently being spawned or the animations are playing for a team.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NtfTickets">
            <summary>
            Gets or sets the amount of spawn tickets belonging to the NTF.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ChaosTickets">
            <summary>
            Gets or sets the amount of spawn tickets belonging to the Chaos Insurgency.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.Controller">
            <summary>
            Gets the actual <see cref="T:Respawning.RespawnEffectsController"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(System.Byte)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(Exiled.API.Enums.RespawnEffectType)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(System.Byte[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(Exiled.API.Enums.RespawnEffectType[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonChaosInsurgencyVan(System.Boolean)">
            <summary>
            Summons the <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/> van.
            </summary>
            <param name="playMusic">Whether or not to play the Chaos Insurgency spawn music.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.GrantTickets(Respawning.SpawnableTeamType,System.Int32,System.Boolean)">
            <summary>
            Grants tickets to a <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to grant tickets to.</param>
            <param name="amount">The amount of tickets to grant.</param>
            <param name="overrideLocks">Whether or not to override ticket locks.</param>
            <returns>Whether or not tickets were granted successfully.</returns>
        </member>
        <member name="M:Exiled.API.Features.Respawn.ForceWave(Respawning.SpawnableTeamType,System.Boolean)">
            <summary>
            Forces a spawn of the given <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to spawn.</param>
            <param name="playEffects">Whether or not effects will be played with the spawn.</param>
        </member>
        <member name="T:Exiled.API.Features.Roles.HumanRole">
            <summary>
            Defines a role that represents a human class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.HumanRole.#ctor(Exiled.API.Features.Player,RoleType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.HumanRole"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
            <param name="type">The RoleType.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.RoleType">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Roles.NoneRole">
            <summary>
            Defines a role that represents players with no role.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.NoneRole.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.NoneRole"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.NoneRole.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.NoneRole.RoleType">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Roles.Role">
            <summary>
            Defines the class for role-related classes.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Owner">
            <summary>
            Gets the player this role is referring to.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Type">
            <summary>
            Gets or sets the <see cref="P:Exiled.API.Features.Roles.Role.RoleType"/> of this player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Team">
            <summary>
            Gets the <see cref="T:Team"/> of this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Side">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.Side"/> of this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Color">
            <summary>
            Gets the <see cref="T:UnityEngine.Color"/> of this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.IsValid">
            <summary>
            Gets a value indicating whether or not this role is still valid. This will only ever be <see langword="false"/> if the Role is stored and accessed at a later date.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.RoleType">
            <summary>
            Gets the RoleType belonging to this role.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Implicit(Exiled.API.Features.Roles.Role)~RoleType">
            <summary>
            Converts a role to its appropriate <see cref="T:RoleType"/>.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Equality(Exiled.API.Features.Roles.Role,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not 2 roles are the same.
            </summary>
            <param name="role1">The role.</param>
            <param name="role2">The other role.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Inequality(Exiled.API.Features.Roles.Role,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not the two roles are different.
            </summary>
            <param name="role1">The role.</param>
            <param name="role2">The other role.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Equality(Exiled.API.Features.Roles.Role,RoleType)">
            <summary>
            Returns whether or not the role has the same RoleType as the given <paramref name="type"/>.
            </summary>
            <param name="role">The role.</param>
            <param name="type">The <see cref="T:RoleType"/>.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Inequality(Exiled.API.Features.Roles.Role,RoleType)">
            <summary>
            Returns whether or not the role has a different RoleType as the given <paramref name="type"/>.
            </summary>
            <param name="role">The role.</param>
            <param name="type">The <see cref="T:RoleType"/>.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Equality(RoleType,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not the role has the same RoleType as the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:RoleType"/>.</param>
            <param name="role">The role.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Inequality(RoleType,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not the role has a different RoleType as the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:RoleType"/>.</param>
            <param name="role">The role.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.As``1">
            <summary>
            Casts the role to the specified role type.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <returns>The casted class, if possible.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Is``1(``0@)">
            <summary>
            Safely casts the role to the specified role type.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <param name="role">The casted class, if possible.</param>
            <returns><see langword="true"/> if the cast was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Create(RoleType,Exiled.API.Features.Player)">
            <summary>
            Creates a role from RoleType and Player.
            </summary>
            <param name="type">The RoleType.</param>
            <param name="player">The Player.</param>
            <returns>A role.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp0492Role">
            <summary>
            Defines a role that represents SCP-049-2.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp0492Role.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp0492Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.Script">
            <summary>
            Gets the <see cref="T:Scp049_2PlayerScript"/> for this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.AttackDistance">
            <summary>
            Gets or sets the SCP-049-2 attack distance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.AttackDamage">
            <summary>
            Gets or sets the SCP-049-2 attack damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.AttackCooldown">
            <summary>
            Gets or sets the amount of time in between SCP-049-2 attacks.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp049Role">
            <summary>
            Defines a role that represents SCP-049.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp049Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.Script">
            <summary>
            Gets the <see cref="T:PlayableScps.Scp049"/> player script for this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.IsRecalling">
            <summary>
            Gets a value indicating whether or not SCP-049 is currently recalling a player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RecallingPlayer">
            <summary>
            Gets the player that is currently being revived by SCP-049. Will be <see langword="null"/> if <see cref="P:Exiled.API.Features.Roles.Scp049Role.IsRecalling"/> is false.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.InRecallRange(Exiled.API.Features.Ragdoll)">
            <summary>
            Gets a boolean indicating whether or not SCP-049 is close enough to a ragdoll to revive it.
            <para>
            This method only returns whether or not SCP-049 is close enough to the body to revive it; the body may have expired. Make sure to check <see cref="P:Exiled.API.Features.Ragdoll.AllowRecall"/> to ensure the body can be revived.
            </para>
            </summary>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if close enough to revive the body; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp079Role">
            <summary>
            Defines a role that represents SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp079Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Script">
            <summary>
            Gets the <see cref="T:Scp079PlayerScript"/> script for the role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Camera">
            <summary>
            Gets or sets the camera SCP-079 is currently controlling.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Abilities">
            <summary>
            Gets or sets SCP-079's abilities. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Levels">
            <summary>
            Gets or sets SCP-079's levels. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Speaker">
            <summary>
            Gets or sets the speaker SCP-079 is currently using. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.LockedDoors">
            <summary>
            Gets or sets the doors SCP-079 has locked. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Experience">
            <summary>
            Gets or sets the amount of experience SCP-079 has.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Level">
            <summary>
            Gets or sets SCP-079's level.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.MaxEnergy">
            <summary>
            Gets or sets SCP-079's max energy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Energy">
            <summary>
            Gets or sets SCP-079's energy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.SetCamera(System.UInt16)">
            <summary>
            Sets the camera SCP-079 is currently located at.
            </summary>
            <param name="cameraId">Camera ID.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.SetCamera(Exiled.API.Enums.CameraType)">
            <summary>
            Sets the camera SCP-079 is currently located at.
            </summary>
            <param name="cameraType">The <see cref="T:Exiled.API.Enums.CameraType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.SetCamera(Exiled.API.Features.Camera)">
            <summary>
            Sets the camera SCP-079 is currently located at.
            </summary>
            <param name="camera">The <see cref="P:Exiled.API.Features.Roles.Scp079Role.Camera"/> object to switch to.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.UnlockDoors">
            <summary>
            Unlocks all doors that SCP-079 has locked.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp096Role">
            <summary>
            Defines a role that represents SCP-096.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp096Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.Script">
            <summary>
            Gets the <see cref="T:PlayableScps.Scp096"/> script for the role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.State">
            <summary>
            Gets a value indicating SCP-096's state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.CanReceiveTargets">
            <summary>
            Gets a value indicating whether or not SCP-096 can receive targets.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.IsEnraged">
            <summary>
            Gets a value indicating whether or not SCP-096 is currently enraged.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.IsDocile">
            <summary>
            Gets a value indicating whether or not SCP-096 is currently docile.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.TryingNotToCry">
            <summary>
            Gets a value indicating whether or not SCP-096 is currently trying not to cry behind a door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.IsPryingGate">
            <summary>
            Gets a value indicating whether or not SCP-096 is currently prying a gate.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.IsCharging">
            <summary>
            Gets a value indicating whether or not SCP-096 is currently charging.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.ChargeCooldown">
            <summary>
            Gets or sets the amount of time in between SCP-096 charges.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.EnrageCooldown">
            <summary>
            Gets or sets the amount of time before SCP-096 can be enraged again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.Targets">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of Players that are currently targeted by SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp106Role">
            <summary>
            Defines a role that represents SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp106Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.Script">
            <summary>
            Gets the <see cref="T:Scp106PlayerScript"/> script for the role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsInsideObject">
            <summary>
            Gets a value indicating whether or not SCP-106 is currently inside of an object.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsInsideDoor">
            <summary>
            Gets a value indicating whether or not SCP-106 is currently inside of a door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.InsideDoor">
            <summary>
            Gets the door that SCP-106 is currently inside of.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.PortalPosition">
            <summary>
            Gets or sets the location of SCP-106's portal.
            </summary>
            <remarks>
            Note: Every alive SCP-106 uses the same portal.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.CaptureCooldown">
            <summary>
            Gets or sets the amount of time in between player captures.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.UsePortal">
            <summary>
            Forces SCP-106 to use its portal, if one is placed.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.Contain(Exiled.API.Features.Player)">
            <summary>
            Contains SCP-106.
            </summary>
            <param name="container">The player who recontained SCP-106.</param>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp173Role">
            <summary>
            Defines a role that represents SCP-173.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp173Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.Script">
            <summary>
            Gets the <see cref="T:PlayableScps.Scp173"/> script for the role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.IsObserved">
            <summary>
            Gets a value indicating whether or not SCP-173 is currently being viewed by one or more players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.ObservingPlayers">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of players that are currently viewing SCP-173. Can be empty.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.MoveSpeed">
            <summary>
            Gets SCP-173's move speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkReady">
            <summary>
            Gets or sets a value indicating whether or not SCP-173 is able to blink.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkCooldown">
            <summary>
            Gets or sets the amount of time before SCP-173 can blink.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkDistance">
            <summary>
            Gets a value indicating the max distance that SCP-173 can move in a blink. Factors in <see cref="P:Exiled.API.Features.Roles.Scp173Role.BreakneckActive"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BreakneckActive">
            <summary>
            Gets or sets a value indicating whether or not SCP-173's breakneck speed is active.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BreakneckCooldown">
            <summary>
            Gets or sets the amount of time before SCP-173 can use breackneck speed again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.TantrumCooldown">
            <summary>
            Gets or sets the amount of time before SCP-173 can place a tantrum.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.Tantrum(System.Boolean)">
            <summary>
            Places a Tantrum (SCP-173's ability) under the player.
            </summary>
            <param name="failIfObserved">Whether or not to place the tantrum if SCP-173 is currently being viewed.</param>
            <returns>The tantrum's <see cref="T:UnityEngine.GameObject"/>, or <see langword="null"/> if it cannot be placed.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp939Role">
            <summary>
            Defines a role that represents SCP-939.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.#ctor(Exiled.API.Features.Player,RoleType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp939Role"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
            <param name="scp939Type">The type of SCP-939.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.Script">
            <summary>
            Gets the <see cref="T:PlayableScps.Scp939"/> script for this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.AttackCooldown">
            <summary>
            Gets or sets the amount of time before SCP-939 can attack again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.MoveSpeed">
            <summary>
            Gets SCP-939's move speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.RoleType">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Roles.SpectatorRole">
            <summary>
            Defines a role that represents a human class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.SpectatorRole.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.SpectatorRole"/> class.
            </summary>
            <param name="player">The encapsulated player.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.DeathTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> at which the player died.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.DeadTime">
            <summary>
            Gets the total amount of time the player has been dead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.SpectatedPlayer">
            <summary>
            Gets or sets currently spectated player by this <see cref="T:Exiled.API.Features.Player"/>. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.RoleType">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Room">
            <summary>
            The in-game room.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Room.RoomsValue">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Room"/>s on the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> which contains all the <see cref="T:Exiled.API.Features.Room"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Name">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.GameObject">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Transform">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Position">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Zone">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ZoneType"/> in which the room is located.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Type">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.RoomType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomIdentifier">
            <summary>
            Gets a reference to the room's <see cref="T:MapGeneration.RoomIdentifier"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.TeslaGate">
            <summary>
            Gets a reference to the <see cref="T:TeslaGate"/> in the room, or <see langword="null"/> if this room does not contain one.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Players">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Doors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.LightIntensity">
            <summary>
            Gets or sets the intensity of the lights in the room.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Color">
            <summary>
            Gets or sets the color of the room's lights by changing the warhead color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Cameras">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.LightsOn">
            <summary>
            Gets or sets a value indicating whether or not the lights in this room are currently flickered on.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.FlickerableLightControllerNetIdentity">
            <summary>
            Gets the FlickerableLightController's NetworkIdentity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.FlickerableLightController">
            <summary>
            Gets the room's FlickerableLightController.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(Exiled.API.Enums.RoomType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:Exiled.API.Enums.RoomType"/>.
            </summary>
            <param name="roomType">The <see cref="T:Exiled.API.Enums.RoomType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:Exiled.API.Enums.RoomType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(UnityEngine.Vector3)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:UnityEngine.Vector3"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(Exiled.API.Enums.ZoneType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="zoneType">The <see cref="T:Exiled.API.Enums.ZoneType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:Exiled.API.Enums.ZoneType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(System.Func{Exiled.API.Features.Room,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Random(Exiled.API.Enums.ZoneType)">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
            <param name="zoneType">Filters by <see cref="T:Exiled.API.Enums.ZoneType"/>.</param>
            <returns><see cref="T:Exiled.API.Features.Room"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.TurnOffLights(System.Single)">
            <summary>
            Flickers the room's lights off for a duration.
            </summary>
            <param name="duration">Duration in seconds.</param>
        </member>
        <member name="M:Exiled.API.Features.Room.LockDown(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all the doors in the room.
            </summary>
            <param name="duration">Duration in seconds, or <c>-1</c> for permanent lockdown.</param>
            <param name="lockType">DoorLockType of the lockdown.</param>
            <seealso cref="M:Exiled.API.Features.Door.LockAll(System.Single,Exiled.API.Enums.ZoneType,Exiled.API.Enums.DoorLockType)"/>
            <seealso cref="M:Exiled.API.Features.Door.LockAll(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType},Exiled.API.Enums.DoorLockType)"/>
        </member>
        <member name="M:Exiled.API.Features.Room.Blackout(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all the doors and turns off all lights in the room.
            </summary>
            <param name="duration">Duration in seconds, or <c>-1</c> for permanent blackout.</param>
            <param name="lockType">DoorLockType of the blackout.</param>
            <seealso cref="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,Exiled.API.Enums.ZoneType)"/>
            <seealso cref="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})"/>
        </member>
        <member name="M:Exiled.API.Features.Room.UnlockAll">
            <summary>
            Unlocks all the doors in the room.
            </summary>
            <seealso cref="M:Exiled.API.Features.Door.UnlockAll"/>
            <seealso cref="M:Exiled.API.Features.Door.UnlockAll(Exiled.API.Enums.ZoneType)"/>
            <seealso cref="M:Exiled.API.Features.Door.UnlockAll(System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})"/>
            <seealso cref="M:Exiled.API.Features.Door.UnlockAll(System.Func{Exiled.API.Features.Door,System.Boolean})"/>
        </member>
        <member name="M:Exiled.API.Features.Room.ResetColor">
            <summary>
            Resets the room color to default.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.CreateComponent(UnityEngine.GameObject)">
            <summary>
            Factory method to create and add a <see cref="T:Exiled.API.Features.Room"/> component to a Transform.
            We can add parameters to be set privately here.
            </summary>
            <param name="roomGameObject">The Game Object to attach the Room component to.</param>
            <returns>The Room component that was instantiated onto the Game Object.</returns>
        </member>
        <member name="T:Exiled.API.Features.Round">
            <summary>
            A set of tools to handle the round more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ElapsedTime">
            <summary>
            Gets the time elapsed from the start of the round.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.StartedTime">
            <summary>
            Gets the start time of the round.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsStarted">
            <summary>
            Gets a value indicating whether the round is started or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsEnded">
            <summary>
            Gets a value indicating whether the round is ended or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLobby">
            <summary>
            Gets a value indicating whether the round is lobby or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLocked">
            <summary>
            Gets or sets a value indicating whether the round is locked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLobbyLocked">
            <summary>
            Gets or sets a value indicating whether the lobby is locked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.EscapedDClasses">
            <summary>
            Gets the number of players who have escaped as <see cref="F:RoleType.ClassD"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.EscapedScientists">
            <summary>
            Gets the number of players who have escaped as <see cref="F:RoleType.Scientist"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.Kills">
            <summary>
            Gets the number of kills.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.KillsByScp">
            <summary>
            Gets the number of kills made by SCPs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ChangedIntoZombies">
            <summary>
            Gets the number of players who have been turned into zombies.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.UptimeRounds">
            <summary>
            Gets the number of rounds since the server started.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.AliveSides">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> indicating the sides that are currently alive.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.Restart(System.Boolean,System.Boolean,ServerStatic.NextRoundAction)">
            <summary>
            Restarts the round with custom settings.
            </summary>
            <param name="fastRestart">
            Indicates whether or not it'll be a fast restart.
            If it's a fast restart, then players won't be reconnected from
            the server; otherwise, they will.
            </param>
            <param name="overrideRestartAction">
            Overrides a value of <see cref="T:ServerStatic.NextRoundAction"/>.
            Makes sense if someone used a command to set another action.
            </param>
            <param name="restartAction">
            The <see cref="T:ServerStatic.NextRoundAction"/>.
            <para>
            <see cref="F:ServerStatic.NextRoundAction.DoNothing"/> - does nothing, just restarts the round silently.
            <see cref="F:ServerStatic.NextRoundAction.Restart"/> - restarts the server, reconnects all players.
            <see cref="F:ServerStatic.NextRoundAction.Shutdown"/> - shutdowns the server, also disconnects all players.
            </para>
            </param>
        </member>
        <member name="M:Exiled.API.Features.Round.RestartSilently">
            <summary>
            Restarts the round silently.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.EndRound(System.Boolean)">
            <summary>
            Forces the round to end, regardless of which factions are alive.
            </summary>
            <param name="forceEnd">
            Indicates whether or not it'll force the restart with no check if it's lock.
            </param>
            <returns>A <see cref="T:System.Boolean"/> describing whether or not the round was successfully ended.</returns>
        </member>
        <member name="M:Exiled.API.Features.Round.Start">
            <summary>
            Start the round.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp096">
            <summary>
            A set of tools to modify SCP-096's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp096.TurnedPlayers">
            <summary>
            Gets a list of player ids who will be turned away from SCP-096.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp106Container">
            <summary>
            A wrapper class for <see cref="T:LureSubjectContainer"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.IgnoredPlayers">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players ignored by LureSubjectContainer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.IgnoredRoles">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:RoleType"/> which contains all the roles ignored by LureSubjectContainer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.IgnoredTeams">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Team"/> which contains all the teams ignored by LureSubjectContainer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.Base">
            <summary>
            Gets the base <see cref="T:LureSubjectContainer"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.GameObject">
            <summary>
            Gets the LureSubjectContainer <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.Transform">
            <summary>
            Gets the LureSubjectContainer <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.Position">
            <summary>
            Gets the LureSubjectContainer position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.Rotation">
            <summary>
            Gets the LureSubjectContainer rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.BoxCollider">
            <summary>
            Gets the <see cref="T:UnityEngine.BoxCollider"/> of the LureSubjectContainer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.Scp106FemurUsed">
            <summary>
            Gets or sets a value indicating whether or not the SCP-106 container has been used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp106Container.AllowContain">
            <summary>
            Gets or sets a value indicating whether or not the SCP-106 container can be used.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp106Container.InTheKillZone(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the range of the KillZone.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the range of the KillZone; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Scp106Container.CanBeKilled(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> can be killed.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> can be killed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Scp173">
            <summary>
            A set of tools to modify SCP-173's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp173.TurnedPlayers">
            <summary>
            Gets a list of player ids who will be turned away from SCP-173.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp914">
            <summary>
            A set of tools to modify SCP-914's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.Scp914Controller">
            <summary>
            Gets the cached <see cref="T:Scp914.Scp914Controller"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.KnobStatus">
            <summary>
            Gets or sets SCP-914's <see cref="T:Scp914.Scp914KnobSetting"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.ConfigMode">
            <summary>
            Gets or sets SCP-914's config mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.GameObject">
            <summary>
            Gets SCP-914's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IntakePosition">
            <summary>
            Gets the position of SCP-914's intake chamber.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.OutputPosition">
            <summary>
            Gets the position of SCP-914's output chamber.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IsWorking">
            <summary>
            Gets a value indicating whether SCP-914 was activated and is currently processing items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IntakeBooth">
            <summary>
            Gets the intake booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.OutputBooth">
            <summary>
             Gets the output booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp914.PlaySound(System.Byte)">
            <summary>
            Plays the SCP-914's sound.
            </summary>
            <param name="soundId">The soundId to play.</param>
            <remarks>There are two sounds only.
            The values to identify them are <c>0</c>, which stands for the soundId played when SCP-914 is being activated,
            and <c>1</c>, which stands for the soundId played when SCP-914's knob state is being changed.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Scp914.Start">
            <summary>
            Starts SCP-914.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Server">
            <summary>
            A set of tools to easily work with the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Host">
            <summary>
            Gets the player's host of the server.
            Might be <see langword="null"/> when called when the server isn't loaded.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Broadcast">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.Broadcast"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.BanPlayer">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.BanPlayer"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.SendSpawnMessage">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.SendSpawnMessage"/> <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Name">
            <summary>
            Gets or sets the name of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.PermissionsHandler">
            <summary>
            Gets the RemoteAdmin permissions handler.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IpAddress">
            <summary>
            Gets the Ip address of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Port">
            <summary>
            Gets the port of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Tps">
            <summary>
            Gets the actual ticks per second of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.FriendlyFire">
            <summary>
            Gets or sets a value indicating whether friendly fire is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.PlayerCount">
            <summary>
            Gets the number of players currently on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.MaxPlayerCount">
            <summary>
            Gets or sets the maximum number of players able to be on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.LaterJoinEnabled">
            <summary>
            Gets or sets a value indicating whether or not later join is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.LaterJoinTime">
            <summary>
            Gets or sets the late join time, in seconds. If a player joins less than this many seconds into a game, they will be given a random class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.SpawnProtectTime">
            <summary>
            Gets or sets the spawn protection time, in seconds.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsHeavilyModded">
            <summary>
            Gets or sets a value indicating whether the server is marked as Heavily Modded.
            <remarks>
            Read the VSR for more info about its usage.
            </remarks>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.Restart">
            <summary>
            Restarts the server, reconnects all players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.Shutdown">
            <summary>
            Shutdowns the server, disconnects all players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.RestartRedirect(System.UInt16)">
            <summary>
            Redirects players to a server on another port, restarts the current server.
            </summary>
            <param name="redirectPort">The port to redirect players to.</param>
            <returns><see langword="true"/> if redirection was successful; otherwise, <see langword="false"/>.</returns>
            <remarks>If the returned value is <see langword="false"/>, the server won't restart.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Server.ShutdownRedirect(System.UInt16)">
            <summary>
            Redirects players to a server on another port, shutdowns the current server.
            </summary>
            <param name="redirectPort">The port to redirect players to.</param>
            <returns><see langword="true"/> if redirection was successful; otherwise, <see langword="false"/>.</returns>
            <remarks>If the returned value is <see langword="false"/>, the server won't shutdown.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Server.RunCommand(System.String,CommandSender)">
            <summary>
            Runs a server command.
            </summary>
            <param name="command">The command to be run.</param>
            <param name="sender">The <see cref="T:CommandSender"/> running the command.</param>
        </member>
        <member name="T:Exiled.API.Features.Spawn.DynamicSpawnPoint">
            <summary>
            Handles dynamic spawn locations.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Location">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomItems.API.SpawnLocation"/> for this item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Chance">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Position">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Spawn.RoleSpawnPoint">
            <summary>
            Defines a spawn point that follows a base-game role spawn point.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Role">
            <summary>
            Gets or sets the role type used for this spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Chance">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Position">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Spawn.SpawnPoint">
            <summary>
            Defines item spawn properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnPoint.Name">
            <summary>
            Gets or sets this spawn point name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnPoint.Chance">
            <summary>
            Gets or sets the spawn chance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnPoint.Position">
            <summary>
            Gets or sets this spawn point position.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Spawn.SpawnPoint.Deconstruct(System.Single@,UnityEngine.Vector3@)">
            <summary>
            Deconstructs the class into usable variables.
            </summary>
            <param name="chance"><inheritdoc cref="P:Exiled.API.Features.Spawn.SpawnPoint.Chance"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.API.Features.Spawn.SpawnPoint.Position"/></param>
        </member>
        <member name="T:Exiled.API.Features.Spawn.SpawnProperties">
            <summary>
            Handles special properties of spawning an item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.Limit">
            <summary>
            Gets or sets a value indicating how many of the item can be spawned when the round starts.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.DynamicSpawnPoints">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of possible dynamic spawn points.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.StaticSpawnPoints">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of possible static spawn points.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.RoleSpawnPoints">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of possible role-based spawn points.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Spawn.SpawnProperties.Count">
            <summary>
            Counts how many spawn points are in this instance.
            </summary>
            <returns>How many spawn points there are.</returns>
        </member>
        <member name="T:Exiled.API.Features.Spawn.StaticSpawnPoint">
            <summary>
            Handles static spawn locations.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.StaticSpawnPoint.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.StaticSpawnPoint.Chance">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.StaticSpawnPoint.Position">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.TeslaGate">
            <summary>
            The in-game tesla gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.TeslaGate.TeslasValue">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> on the map.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.#ctor(TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.TeslaGate"/> class.
            </summary>
            <param name="baseTeslaGate">The <see cref="T:TeslaGate"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> which contains all the <see cref="T:Exiled.API.Features.TeslaGate"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IgnoredPlayers">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players ignored by tesla gates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IgnoredRoles">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:RoleType"/> which contains all the roles ignored by tesla gates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IgnoredTeams">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Team"/> which contains all the teams ignored by tesla gates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Base">
            <summary>
            Gets the base <see cref="T:TeslaGate"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.GameObject">
            <summary>
            Gets the tesla gate's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Transform">
            <summary>
            Gets the tesla gate's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Position">
            <summary>
            Gets the tesla gate's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Rotation">
            <summary>
            Gets the tesla gate's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Room">
            <summary>
            Gets the tesla gate's <see cref="T:Exiled.API.Features.Room"/> which is located in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IsShocking">
            <summary>
            Gets a value indicating whether the tesla gate' shock burst is in progess.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.InactiveTime">
            <summary>
            Gets or sets the tesla gate's inactive time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.HurtRange">
            <summary>
            Gets or sets the tesla gate's radius from which players can be hurted.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.TriggerRange">
            <summary>
            Gets or sets the tesla gate's distance from which can be triggered.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IdleRange">
            <summary>
            Gets or sets the tesla gate's distance from which players must stand for it to enter idle mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.ActivationTime">
            <summary>
            Gets or sets the tesla gate's windup time to wait before generating the shock.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.CooldownTime">
            <summary>
            Gets or sets the tesla gate's cooldown to wait before the next shock.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IsIdling">
            <summary>
            Gets or sets a value indicating whether the tesla gate is idling.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.UseInstantBurst">
            <summary>
            Gets or sets a value indicating whether the tesla gate's next burst should be treated as instant burst.
            <para>The instant burst ignores the standard cooldown time, reducing it to the cooldown time used for bursts triggered by SCP-079.</para>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.TantrumsToDestroy">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:UnityEngine.GameObject"/> which contains all the tantrums to destroy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.PlayersInHurtRange">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players inside the hurt range.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.PlayersInIdleRange">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players inside the idle range.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.PlayersInTriggerRange">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players inside the trigger range.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.Get(TeslaGate)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.TeslaGate"/> belonging to the <see cref="T:TeslaGate"/>.
            </summary>
            <param name="baseTeslaGate">The <see cref="T:TeslaGate"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.TeslaGate"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.Get(System.Func{Exiled.API.Features.TeslaGate,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.Trigger(System.Boolean)">
            <summary>
            Triggers the tesla gate.
            </summary>
            <param name="isInstantBurst">A value indicating whether the shock should be treated as instant burst.</param>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.ForceTrigger">
            <summary>
            Force triggers the tesla gate ignoring the delay between each burst.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.PlayerInHurtRange(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the hurt range of a specific tesla gate.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the hurt range of the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.PlayerInIdleRange(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the idle range of a specific tesla gate.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the idle range of the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.PlayerInTriggerRange(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the trigger range of a specific tesla gate.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the trigger range of the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.CanBeIdle(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the tesla gate can be idle by a specific <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> can idle the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.CanBeTriggered(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the tesla gate can be triggered by a specific <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> can trigger the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.AdminToy">
            <summary>
            A wrapper class for <see cref="T:AdminToys.AdminToyBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.#ctor(AdminToys.AdminToyBase,Exiled.API.Enums.AdminToyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.AdminToy"/> class.
            </summary>
            <param name="toyAdminToyBase">The <see cref="T:AdminToys.AdminToyBase"/> to be wrapped.</param>
            <param name="type">The <see cref="T:Exiled.API.Enums.AdminToyType"/> of the object.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.AdminToyBase">
            <summary>
            Gets the original <see cref="T:AdminToys.AdminToyBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.ToyType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.AdminToyType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.Position">
            <summary>
            Gets or sets the position of the toy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.Rotation">
            <summary>
            Gets or sets the rotation of the toy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.Scale">
            <summary>
            Gets or sets the scale of the toy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.MovementSmoothing">
            <summary>
            Gets or sets the movement smoothing value of the toy.
            <para>
            Higher values reflect smoother movements.
            <br /> - 60 is an ideal value.
            </para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.Get(AdminToys.AdminToyBase)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.AdminToy"/> belonging to the <see cref="T:AdminToys.AdminToyBase"/>.
            </summary>
            <param name="adminToyBase">The <see cref="T:AdminToys.AdminToyBase"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Toys.AdminToy"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.Spawn">
            <summary>
            Spawns the toy into the game. Use <see cref="M:Exiled.API.Features.Toys.AdminToy.UnSpawn"/> to remove it.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.UnSpawn">
            <summary>
            Removes the toy from the game. Use <see cref="M:Exiled.API.Features.Toys.AdminToy.Spawn"/> to bring it back.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.Destroy">
            <summary>
            Destroys the toy.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Toys.Light">
            <summary>
            A wrapper class for <see cref="T:AdminToys.LightSourceToy"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.#ctor(AdminToys.LightSourceToy)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.Light"/> class.
            </summary>
            <param name="lightSourceToy">The <see cref="T:AdminToys.LightSourceToy"/> of the toy.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Base">
            <summary>
            Gets the base <see cref="T:AdminToys.LightSourceToy"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Intensity">
            <summary>
            Gets or sets the intensity of the light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Range">
            <summary>
            Gets or sets the range of the light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Color">
            <summary>
            Gets or sets the color of the primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.ShadowEmission">
            <summary>
            Gets or sets a value indicating whether the light should cause shadows from other objects.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.Create(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Light"/>.
            </summary>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Toys.Light"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Light"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.Get(AdminToys.LightSourceToy)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.Light"/> belonging to the <see cref="T:AdminToys.LightSourceToy"/>.
            </summary>
            <param name="lightSourceToy">The <see cref="T:AdminToys.LightSourceToy"/> instance.</param>
            <returns>The corresponding <see cref="T:AdminToys.LightSourceToy"/> instance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.Primitive">
            <summary>
            A wrapper class for <see cref="T:AdminToys.PrimitiveObjectToy"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.#ctor(AdminToys.PrimitiveObjectToy)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.Primitive"/> class.
            </summary>
            <param name="toyAdminToyBase">The <see cref="T:AdminToys.PrimitiveObjectToy"/> of the toy.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Base">
            <summary>
            Gets the base <see cref="T:AdminToys.PrimitiveObjectToy"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Type">
            <summary>
            Gets or sets the type of the primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Color">
            <summary>
            Gets or sets the material color of the primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Collidable">
            <summary>
            Gets or sets a value indicating whether the primitive can be collided with.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Create(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.
            </summary>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Toys.Primitive"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Get(AdminToys.PrimitiveObjectToy)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.Primitive"/> belonging to the <see cref="T:AdminToys.PrimitiveObjectToy"/>.
            </summary>
            <param name="primitveObjectToy">The <see cref="T:AdminToys.PrimitiveObjectToy"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Toys.Primitive"/> instance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.ShootingTargetToy">
            <summary>
            A wrapper class for <see cref="T:AdminToys.ShootingTarget"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.#ctor(AdminToys.ShootingTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> class.
            </summary>
            <param name="target">The base <see cref="T:AdminToys.ShootingTarget"/> class.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Base">
            <summary>
            Gets the base-game <see cref="T:AdminToys.ShootingTarget"/> for this target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Bullseye">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the bullseye.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.VerificationRule">
            <summary>
            Gets the <see cref="T:Interactables.Verification.IVerificationRule"/> for this target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.BullseyePosition">
            <summary>
            Gets the bullseye location of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.BullseyeRadius">
            <summary>
            Gets the bullseye radius of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.MaxHealth">
            <summary>
            Gets or sets the max health of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Health">
            <summary>
            Gets or sets the remaining health of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.AutoResetTime">
            <summary>
            Gets or sets the remaining health of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Scale">
            <summary>
            Gets or sets the size scale of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.IsSynced">
            <summary>
            Gets or sets a value indicating whether or not the target is in sync mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Create(Exiled.API.Enums.ShootingTargetType,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.ShootingTargetType"/> of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Get(AdminToys.ShootingTarget)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> belonging to the <see cref="T:AdminToys.ShootingTarget"/>.
            </summary>
            <param name="shootingTarget">The <see cref="T:AdminToys.ShootingTarget"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Clear">
            <summary>
            Clears the target and resets its health.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Damage(System.Single,PlayerStatsSystem.DamageHandlerBase,UnityEngine.Vector3)">
            <summary>
            Damages the target with the given damage, item, footprint, and hit location.
            </summary>
            <param name="damage">The damage to be dealt.</param>
            <param name="damageHandler">The <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> dealing the damage.</param>
            <param name="exactHit">The exact location of the hit.</param>
            <returns>Whether or not the damage was sent.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.ToysHelper">
            <summary>
            A helper class for interacting with toys.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.PrimitiveBaseObject">
            <summary>
            Gets the base <see cref="T:AdminToys.PrimitiveObjectToy"/> to instantiate when creating a new primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.LightBaseObject">
            <summary>
            Gets the base <see cref="T:AdminToys.LightSourceToy"/> to instantiate when creating a new light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.SportShootingTargetObject">
            <summary>
            Gets the base <see cref="T:AdminToys.ShootingTarget"/> to instantiate when creating a new sport shooting target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.DboyShootingTargetObject">
            <summary>
            Gets the base <see cref="T:AdminToys.ShootingTarget"/> to instantiate when creating a new dboy shooting target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.BinaryShootingTargetObject">
            <summary>
            Gets the base <see cref="T:AdminToys.ShootingTarget"/> to instantiate when creating a new binary shooting target.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Warhead">
            <summary>
            A set of tools to easily work with the alpha warhead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Controller">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadController"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.SitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadNukesitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.OutsitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadOutsitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Lever">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the warhead lever.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.LeverStatus">
            <summary>
            Gets or sets a value indicating whether the warhead lever is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsKeycardActivated">
            <summary>
            Gets or sets a value indicating whether the warhead has already been activated or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Status">
            <summary>
            Gets or sets the warhead status.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsDetonated">
            <summary>
            Gets a value indicating whether the warhead has already been detonated or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsInProgress">
            <summary>
            Gets a value indicating whether the warhead detonation is in progress or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.DetonationTimer">
            <summary>
            Gets or sets the warhead detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.RealDetonationTimer">
            <summary>
            Gets the warhead real detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsLocked">
            <summary>
            Gets or sets a value indicating whether the warhead can be disabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.CanBeStarted">
            <summary>
            Gets a value indicating whether the warhead can be started or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Start">
            <summary>
            Starts the warhead countdown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Stop">
            <summary>
            Stops the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Detonate">
            <summary>
            Detonates the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Shake">
            <summary>
            Shake all players, like if the warhead has been detonated.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Window">
            <summary>
            A wrapper class for <see cref="T:BreakableWindow"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Window.WindowValue">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Window"/> on the map.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Window.#ctor(BreakableWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Window"/> class.
            </summary>
            <param name="window">The base <see cref="T:BreakableWindow"/> for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Window.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains all the <see cref="T:Exiled.API.Features.Door"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Base">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Door"/> which contains all the <see cref="T:Exiled.API.Features.Door"/> instances.
            </summary>
            <summary>
            Gets the base-game <see cref="T:BreakableWindow"/> for this window.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the window.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Room">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Window.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Type">
            <summary>
            Gets the window <see cref="T:Exiled.API.Enums.GlassType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Position">
            <summary>
            Gets or sets the window's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Is079Trigger">
            <summary>
            Gets a value indicating whether or not this window is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.IsBreakable">
            <summary>
            Gets a value indicating whether or not this window is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.IsBroken">
            <summary>
            Gets or sets a value indicating whether or not this window is broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Health">
            <summary>
            Gets or sets if the window's remaining health. No effect if the window cannot be broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Rotation">
            <summary>
            Gets or sets the window's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.DisableScpDamage">
            <summary>
            Gets or sets a value indicating whether or not this window can be broken by SCP.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.SyncStatus">
            <summary>
            Gets or sets a value indicating whether or not this window is broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.LastAttacker">
            <summary>
            Gets or sets a value indicating who is the LastAttacker.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Window.Get(BreakableWindow)">
            <summary>
            Gets the window object associated with a specific <see cref="T:Exiled.API.Features.Window"/>, or creates a new one if there isn't one.
            </summary>
            <param name="breakableWindow">The base-game <see cref="T:Exiled.API.Features.Window"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Door"/> wrapper object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Window.BreakWindow">
            <summary>
            Break the window.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Window.DamageWindow(System.Single)">
            <summary>
            Damages the window.
            </summary>
            <param name="amount">The amount of damage to deal.</param>
        </member>
        <member name="M:Exiled.API.Features.Window.DamageWindow(System.Single,Exiled.API.Features.DamageHandlers.DamageHandlerBase)">
            <summary>
            Damages the window.
            </summary>
            <param name="amount">The amount of damage to deal.</param>
            <param name="handler">The handler of damage.</param>
        </member>
        <member name="M:Exiled.API.Features.Window.ToString">
            <summary>
            Returns the Window in a human-readable format.
            </summary>
            <returns>A string containing Window-related data.</returns>
        </member>
        <member name="T:Exiled.API.Interfaces.IConfig">
            <summary>
            Defines the contract for basic config features.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IConfig.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IPlugin`1">
            <summary>
            Defines the contract for basic plugin features.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Assembly">
            <summary>
            Gets the plugin assembly.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Name">
            <summary>
            Gets the plugin name.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Prefix">
            <summary>
            Gets the plugin prefix.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Author">
            <summary>
            Gets the plugin author.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Commands">
            <summary>
            Gets the plugin commands.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Priority">
            <summary>
            Gets the plugin priority.
            Higher values mean higher priority and vice versa.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.RequiredExiledVersion">
            <summary>
            Gets the required version of Exiled to run the plugin without bugs or incompatibilities.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Config">
            <summary>
            Gets the plugin config.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.InternalTranslation">
            <summary>
            Gets the internally used translations. Plugins should implement <see cref="T:Exiled.API.Features.Plugin`2"/> and use <see cref="P:Exiled.API.Features.Plugin`2.Translation"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.ConfigPath">
            <summary>
            Gets the plugin config path.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.TranslationPath">
            <summary>
            Gets the plugin translation path.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnEnabled">
            <summary>
            Fired after enabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnDisabled">
            <summary>
            Fired after disabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnReloaded">
            <summary>
            Fired after reloading the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnRegisteringCommands">
            <summary>
            Fired before registering commands.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnUnregisteringCommands">
            <summary>
            Fired before unregistering configs.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.ITranslation">
            <summary>
            Defines the contract for basic translation features.
            </summary>
        </member>
        <member name="T:Exiled.API.Structs.ArmorAmmoLimit">
            <summary>
            The limit of a certain <see cref="T:Exiled.API.Enums.AmmoType"/> when wearing a piece of armor.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.ArmorAmmoLimit.AmmoType">
            <summary>
            The <see cref="T:Exiled.API.Enums.AmmoType"/> being limited.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.ArmorAmmoLimit.Limit">
            <summary>
            The amount to limit to.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.ArmorAmmoLimit.#ctor(Exiled.API.Enums.AmmoType,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.ArmorAmmoLimit"/> struct.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.AmmoType"/> of the ammo.</param>
            <param name="limit">The ammo limit.</param>
        </member>
        <member name="T:Exiled.API.Structs.AttachmentIdentifier">
            <summary>
            A tool to identify attachments.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.#ctor(InventorySystem.Items.Firearms.Attachments.AttachmentName)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> struct.
            </summary>
            <param name="name">The name of the attachment.</param>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.#ctor(InventorySystem.Items.Firearms.Attachments.AttachmentName,InventorySystem.Items.Firearms.Attachments.AttachmentSlot)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> struct.
            </summary>
            <param name="name">The name of the attachment.</param>
            <param name="slot">The slot of the attachment.</param>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.#ctor(System.UInt32,InventorySystem.Items.Firearms.Attachments.AttachmentName,InventorySystem.Items.Firearms.Attachments.AttachmentSlot)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> struct.
            </summary>
            <param name="code">The code of the attachment.</param>
            <param name="name">The name of the attachment.</param>
            <param name="slot">The slot of the attachment.</param>
        </member>
        <member name="P:Exiled.API.Structs.AttachmentIdentifier.Code">
            <summary>
            Gets the attachment code.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.AttachmentIdentifier.Name">
            <summary>
            Gets the attachment name.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.AttachmentIdentifier.Slot">
            <summary>
            Gets the attachment slot.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Equality(Exiled.API.Structs.AttachmentIdentifier,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="left">The left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand to compare.</param>
            <param name="right">The right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Inequality(Exiled.API.Structs.AttachmentIdentifier,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="left">The left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand to compare.</param>
            <param name="right">The right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Equality(Exiled.API.Structs.AttachmentIdentifier,InventorySystem.Items.Firearms.Attachments.Components.Attachment)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <param name="right">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Inequality(Exiled.API.Structs.AttachmentIdentifier,InventorySystem.Items.Firearms.Attachments.Components.Attachment)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <param name="right">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Equality(InventorySystem.Items.Firearms.Attachments.Components.Attachment,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Inequality(InventorySystem.Items.Firearms.Attachments.Components.Attachment,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Addition(Exiled.API.Structs.AttachmentIdentifier,System.UInt32)">
            <summary>
            Computes the sum of its right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand and its left-hand <see cref="T:System.UInt32"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added up.</param>
            <param name="right">The <see cref="T:System.UInt32"/> to be added up.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the sum of the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Subtraction(Exiled.API.Structs.AttachmentIdentifier,System.UInt32)">
            <summary>
            Subtracts its right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand from its left-hand <see cref="T:System.UInt32"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be subtracted.</param>
            <param name="right">The <see cref="T:System.UInt32"/> to be subtracted.</param>
            <returns>A <see cref="T:System.UInt32"/> value representing the subtraction between the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Addition(System.UInt32,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Computes the sum of its right-hand <see cref="T:System.UInt32"/> operand and its left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand.
            </summary>
            <param name="left">The <see cref="T:System.UInt32"/> to be added up.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added up.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the sum of the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Subtraction(System.UInt32,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Subtracts its right-hand <see cref="T:System.UInt32"/> operand from its left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand.
            </summary>
            <param name="left">The <see cref="T:System.UInt32"/> to be subtracted.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be subtracted.</param>
            <returns>A <see cref="T:System.UInt32"/> value representing the subtraction between the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Addition(Exiled.API.Structs.AttachmentIdentifier,Exiled.API.Enums.BaseCode)">
            <summary>
            Computes the sum of its right-hand <see cref="T:Exiled.API.Enums.BaseCode"/> operand and its left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added up.</param>
            <param name="right">The <see cref="T:Exiled.API.Enums.BaseCode"/> to be added up.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the sum of the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Subtraction(Exiled.API.Structs.AttachmentIdentifier,Exiled.API.Enums.BaseCode)">
            <summary>
            Subtracts its right-hand <see cref="T:Exiled.API.Enums.BaseCode"/> operand from its left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Enums.BaseCode"/> to be subtracted.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be subtracted.</param>
            <returns>A <see cref="T:Exiled.API.Enums.BaseCode"/> value representing the subtraction between the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Addition(Exiled.API.Enums.BaseCode,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Computes the sum of its right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand and its left-hand <see cref="T:Exiled.API.Enums.BaseCode"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Enums.BaseCode"/> to be added up.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added up.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the sum of the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Subtraction(Exiled.API.Enums.BaseCode,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Subtracts its right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand from its left-hand <see cref="T:Exiled.API.Enums.BaseCode"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Enums.BaseCode"/> to be subtracted.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be subtracted.</param>
            <returns>A <see cref="T:System.UInt32"/> value representing the subtraction between the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.TryParse(System.String,Exiled.API.Structs.AttachmentIdentifier@)">
            <summary>
            Converts the string representation of a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to its <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> equivalent.
            A return value indicates whether the conversion is succeeded or failed.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <param name="identifier">The converted <see cref="T:System.String"/>.</param>
            <returns><see langword="true"/> if <see cref="T:System.String"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.TryParse(System.String,InventorySystem.Items.Firearms.Attachments.AttachmentName@)">
            <summary>
            Converts the string representation of a <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to its <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> equivalent.
            A return value indicates whether the conversion is succeeded or failed.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <param name="name">The converted <see cref="T:System.String"/>.</param>
            <returns><see langword="true"/> if <see cref="T:System.String"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Equals(InventorySystem.Items.Firearms.Attachments.Components.Attachment)">
            <summary>
            Indicates whether this instance and a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> are equal.
            </summary>
            <param name="firearmAttachment">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare with the current instance.</param>
            <returns><see langword="true"/> if <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> and this instance represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Equals(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Indicates whether this instance and a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> are equal.
            </summary>
            <param name="attachmentIdentifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare with the current instance.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and this instance represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Structs.Elevator">
            <summary>
            The in-game elevator.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.Elevator.#ctor(Lift.Elevator)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.Elevator"/> struct.
            </summary>
            <param name="elevator">The base <see cref="T:Lift.Elevator"/> class.</param>
        </member>
        <member name="P:Exiled.API.Structs.Elevator.Base">
            <summary>
            Gets the base <see cref="T:Lift.Elevator"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.Elevator.Target">
            <summary>
            Gets the elevator's target.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.Elevator.Position">
            <summary>
            Gets or sets the elevator's position.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.Elevator.op_Equality(Exiled.API.Structs.Elevator,Exiled.API.Structs.Elevator)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.Elevator"/> and <see cref="T:Exiled.API.Structs.Elevator"/>.
            </summary>
            <param name="left">The first <see cref="T:Exiled.API.Structs.Elevator"/> to compare.</param>
            <param name="right">The second <see cref="T:Exiled.API.Structs.Elevator"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.Elevator.op_Inequality(Exiled.API.Structs.Elevator,Exiled.API.Structs.Elevator)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.Elevator"/> and <see cref="T:Exiled.API.Structs.Elevator"/>.
            </summary>
            <param name="left">The first <see cref="T:Exiled.API.Structs.Elevator"/> to compare.</param>
            <param name="right">The second <see cref="T:Exiled.API.Structs.Elevator"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.Elevator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.Elevator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.Elevator.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Structs.RadioRangeSettings">
            <summary>
            Settings for specific radio ranges.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.RadioRangeSettings.IdleUsage">
            <summary>
            The amount of battery usage per minute while idle.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.RadioRangeSettings.TalkingUsage">
            <summary>
            The amount of battery usage per minute while talking.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.RadioRangeSettings.MaxRange">
            <summary>
            The maximum range in which this radio will pickup and send voice messages.
            </summary>
        </member>
        <member name="T:Exiled.CustomItems.API.SpawnLocation">
            <summary>
            All of the valid spawn locations.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside012">
            <summary>
            The inside of 012's hallway door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside012Bottom">
            <summary>
            The inside of the locked door leaving to SCP-012's room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside012Locker">
            <summary>
            The inside of the locked 012 armory door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside049Armory">
            <summary>
            The inside of SCP-049's Armory room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside079Secondary">
            <summary>
            The inside of the inner SCP-079 door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside096">
            <summary>
            The inside of SCP-096's locked room behind his spawn.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside173Armory">
            <summary>
            The inside of the armory next to SCP-173's spawn.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside173Bottom">
            <summary>
            The inside of the door at the bottom of SCP-173's stairs.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside173Connector">
            <summary>
            On the side closest to SCP-173's spawn, on the top of the stairs.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideEscapePrimary">
            <summary>
            Inside the first Escape door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideEscapeSecondary">
            <summary>
            Inside the second Escape door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideIntercom">
            <summary>
            Just inside the Intercom door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideLczArmory">
            <summary>
            Inside the LCZ Armory.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideLczCafe">
            <summary>
            Inside the LCZ office room with computers.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideNukeArmory">
            <summary>
            Inside the Nuke armory.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideSurfaceNuke">
            <summary>
            Inside the surface nuke room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside079First">
            <summary>
            Inside the first SCP-079 gate.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside173Gate">
            <summary>
            Inside SCP-079's gate.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.Inside914">
            <summary>
            Just inside of SCP-914.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideGateA">
            <summary>
            Inside the Gate-A room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideGateB">
            <summary>
            Inside the Gate-B room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideGr18">
            <summary>
            Inside the GR-18 door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideHczArmory">
            <summary>
            Inside the T-Junction HCZ Armory.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideHid">
            <summary>
            Inside the Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideHidLeft">
            <summary>
            Just inside the left door next to Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideHidRight">
            <summary>
            Just inside the right door next to Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideLczWc">
            <summary>
            Just inside the LCZ WC door.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideServersBottom">
            <summary>
            Just inside the door at the bottom of the server's room.
            </summary>
        </member>
        <member name="F:Exiled.CustomItems.API.SpawnLocation.InsideLocker">
            <summary>
            Inside a random locker on the map.
            </summary>
        </member>
    </members>
</doc>
